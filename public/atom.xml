<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Technician]]></title>
  <link href="http://chr.ishenry.com/atom.xml" rel="self"/>
  <link href="http://chr.ishenry.com/"/>
  <updated>2013-06-30T18:54:43-04:00</updated>
  <id>http://chr.ishenry.com/</id>
  <author>
    <name><![CDATA[Chris Henry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GReader is going away, and I'm not that sad]]></title>
    <link href="http://chr.ishenry.com/2013/06/09/greader-is-going-away/"/>
    <updated>2013-06-09T13:15:00-04:00</updated>
    <id>http://chr.ishenry.com/2013/06/09/greader-is-going-away</id>
    <content type="html"><![CDATA[<p>There was a period where I was insanely into RSS. It was what I did every time I sat down at the computer. I fired up the Google Reader tab, and spent hours in there. I pored over everything, and it was a really fun game to try and get through everything and still retain at least one useful piece of information from my frenzied filtering. That was usually the case, as at that time, I had a pretty tightly curated list of feeds.</p>

<!-- more -->


<p>Then Twitter came along. I was quite the naysayer of Twitter when it came out, dismissing it as a fad. But I got caught up, just like most people. It was a lot of fun sharing small bits of stuff, and forced me to distill a thought down into 140 characters. It gave me insight into smart people and what they were thinking about. But most importantly, I started using it as my reading list. It was easier to let others pick out the good stuff, and then scan through to find the stuff I thought was relevant to me. Quickly, favorites list became my reading list.</p>

<p>I did, however, switch everything over to <a href="http://www.feedly.com/index.html">Feedly</a> this morning. What I realized is that my list of feeds has become completely unmanageable. I actually broke their UI trying to organize everything. (Not sure if it&#8217;s their fault or mine.) The biggest problem is that I would randomly add feeds after seeing a single post, and many times there was nothing else helpful in the feed. Or worse, the feed is completely dead. In order for RSS to be useful, it seems like a feed has to be active to make it&#8217;s way to in front of my eyeballs. So I got rid of a lot of feeds that had no posts since my last visit to GReader.</p>

<p>This experience has made me doubt the future of RSS Readers as a scalable solution for consuming information. While I&#8217;ll be giving Feedly a fair shot, I wonder how if I&#8217;ll actually be opening it up every day, as opposed to going to Twitter favorites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Decisions with Graphite]]></title>
    <link href="http://chr.ishenry.com/2013/05/05/making-decisions-with-graphite/"/>
    <updated>2013-05-05T21:01:00-04:00</updated>
    <id>http://chr.ishenry.com/2013/05/05/making-decisions-with-graphite</id>
    <content type="html"><![CDATA[<p>The DevOps mentality of &#8220;measure everything&#8221; can be really helpful in key moments when you need to make decisions. In particular, deploying two things side by side for the purposes of measurement can yield super helpful decision making information. For example, the Behance team was wanted to see how <a href="http://php.net/manual/en/book.apc.php">APC</a> stacked up against <a href="http://pecl.php.net/package/ZendOpcache">Zend Opcode Cache</a>.</p>

<!-- more -->


<p>Behance has been running APC for several years, and we&#8217;ve been pretty happy with it. There&#8217;s the typical pain, usually in unexplainable segfaults, that comes with upgrades. However, with the most recent upgrade to PHP 5.4, the segfaults got a bit out of hand. After some investigation, it turned out that APC was on it&#8217;s way out, and we should probably consider other opcode caches. However, as a rightly skeptical team, we wanted to thoroughly vet any alternative thoroughly. APC has been good to us, from a performance standpoint, and we needed to make sure that anything we changed to was as good or better.</p>

<p>For a baseline, we were already measuring performance using <a href="http://chr.ishenry.com/2013/04/01/first-byte/">mod_log_firstbyte</a> and kicking its output to <a href="https://github.com/etsy/statsd/">statsd</a> with a <a href="http://graphite.wikidot.com/">Graphite</a> frontend. Once we confirmed that Zend actually worked with our app (not in production), we reconfigured one of our production web heads to use it. Luckily, our segfaults stopped, which was a fantastic sign. However, to satisfy our performance requirement, we needed some hard numbers.</p>

<p>Graphite has a really great <a href="http://graphite.readthedocs.org/en/0.9.10/render_api.html">API</a> that allows you to slice and dice your data in really helpful ways. Since we were interested in comparing two data series (the newly configured server, and any older server), we were able to use the <a href="http://graphite.readthedocs.org/en/0.9.10/functions.html#graphite.render.functions.diffSeries">diffSeries function</a> to graph the comparison between the two datasets, like so, and produced a graph like below.</p>

<blockquote><p>diffSeries(stats.timers.stat_thats_likely_to_be_higher, stats.timers.stat_thats_likely_to_be_lower)</p></blockquote>

<p><img src="http://chr.ishenry.com/images/user/diffseries.png" alt="diffSeries graph" /></p>

<p>Since there&#8217;s some math involved, this isn&#8217;t the most straightforward graph to read. There are 3 patterns that emerge from using this function;</p>

<ul>
<li>If both series are equal, then it will produce a graph that hovers around 0.</li>
<li>If the second series is consistently lower, then the graph will be consistently > 0.</li>
<li>If the first series is consistently lower, then the graph will be consistently &lt; 0.</li>
</ul>


<p>In the case of our example, we saw a graph that was consistently above 0. This meant that Zend Opcode cache was consistently faster, to the tune of 5-10ms. Knowing that we had solved the segfaults problem, and knowing that Zend was statistically faster, the choice was super simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Policy Fallacy]]></title>
    <link href="http://chr.ishenry.com/2013/04/14/policy-fallacy/"/>
    <updated>2013-04-14T19:05:00-04:00</updated>
    <id>http://chr.ishenry.com/2013/04/14/policy-fallacy</id>
    <content type="html"><![CDATA[<blockquote><p>&#8220;The Navy is a master plan designed by geniuses for execution by idiots. If you&#8217;re not an idiot, but find yourself in the Navy, you can only operate well by pretending to be one.&#8221;
-Herman Wouk, The Caine Mutiny</p></blockquote>

<p>The worst arguments I&#8217;ve ever had were with people who weren&#8217;t willing to bend on policy in situations where the policy made no sense. Context is everything, and most policy is made for a situation that has likely come and gone.</p>

<p>People with judgment will recognize this, especially in the context of running startups. Hopefully, they were the same person that made the original policy, and can see that things have changed. Smart companies have fewer policies, implicitly trusting their teams to make the right decision.</p>

<p><a href="http://www.slideshare.net/HubSpot/the-hubspot-culture-code-creating-a-company-we-love" title="Culture Code: Creating A Lovable Company" target="_blank"><img src="http://image.slidesharecdn.com/culturecode-v7-130320111259-phpapp02/95/slide-62-638.jpg?1366572567" /></a></p>

<p><a href="http://www.slideshare.net/HubSpot/the-hubspot-culture-code-creating-a-company-we-love">Culture Code: Creating A Lovable Company</a> </strong> from <strong><a href="http://www.slideshare.net/HubSpot" target="_blank">HubSpot All-in-one Marketing Software</a></strong></p>

<p>The takeaway here is that you can judge organizations and people based on how beholden they are to policy. Smart ones let you make smart decisions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Byte]]></title>
    <link href="http://chr.ishenry.com/2013/04/01/first-byte/"/>
    <updated>2013-04-01T23:29:00-04:00</updated>
    <id>http://chr.ishenry.com/2013/04/01/first-byte</id>
    <content type="html"><![CDATA[<p>As we all may have some idea of at this point, performance on the web is one of the keys to success. However, finding actionable performance metrics can be a challenge. In the course of a web request, there&#8217;s a lot of stuff that happens. I&#8217;ll briefly explain it here in a couple run-on sentences.</p>

<p>When you click on a link, your browser or client looks up the location of the server via DNS, and then sends off an HTTP request, then your poorly secured router passes it on to the demons that are your local ISP, who then fiendishly pass that same request up to a backbone, which then traverses continents, oceans or even hemispheres, finally arriving at the data center or poorly ventilated closet where the web servers for that particular site live. That web server reads in that request for your stuff (probably porn, you sicko), and begins whatever its process may be to assemble the initial HTML payload, which hopefully involves validating that the way you asked for said stuff is correct, and if it is, then connecting to a database to actually get that lovely stuff, receiving a response, and puts together an HTML page with that data on it, plus references (more on those later) to CSS and JS to format the data in a way that makes sense, and even make it look a little purty. After that exhausting operation, the web server will take the opposite route through the backbone to the succubus ISP, through your router to your computer to your browser. Once that happens, you technically only have the payload HTML, which by itself isn&#8217;t a whole lot of fun, so then the browser will read aforementioned references to CSS and JS, and then make web requests for each of those files, which, btw, will follow the same process as the initial HTML payload went through, until you have all of the CSS and JS. Then you can finally improve your mind by thoughtfully reflecting on the highly intellectual prose you requested not too long ago.</p>

<!-- more -->


<p>The point of all those horribly structured sentences in the context of web performance is that a web request will often spend more time being passed around various routers than actually being processed on a web server. Therefore, the act of measuring an entire web request is a fool&#8217;s errand, since you&#8217;re only measuring lots of things that you as a web developer don&#8217;t have any control over. In reference to my poorly written story, the only bit that you can actually change is the time when the web request is in the poorly ventilated closet, being parsed, processed, retrieved, and put together by the web server.</p>

<p>Therefore, one of the most important measurements to be recorded is the time it actually takes from when a request is received to when the server has started sending the complete result back to the client. Working on a standard LAMP (P being PHP) stack, there is no way that I&#8217;m aware of to do this out of the box. One way is to inject code into your app that will measure this, or to use a framework where this sort of functionality is built in. However, IMHO, that&#8217;s not the best approach, as it&#8217;s just more code that needs to be written, maintained, and could possibly explode in some strange way, affecting your users.</p>

<p>The approach that I&#8217;ve taken to measuring response times on the server is to use a somewhat obscure Apache module called <a href="https://code.google.com/p/mod-log-firstbyte/">mod_first_byte</a>. It&#8217;s surprisingly easy to install and run, and having run it for several weeks, I haven&#8217;t seen any performance issues or other oddities. Here&#8217;s a quick example of how to install it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># make a suitable folder to hold the source</span>
</span><span class='line'><span class="nv">install_dir</span><span class="o">=</span>mod_firstbyte
</span><span class='line'>mkdir <span class="nv">$install_dir</span>
</span><span class='line'>
</span><span class='line'><span class="c"># svn checkout the source into the install_dir</span>
</span><span class='line'>svn checkout http://mod-log-firstbyte.googlecode.com/svn/trunk/ <span class="nv">$install_dir</span>
</span><span class='line'>
</span><span class='line'><span class="c"># depending on your linux flavor, you&#39;ll need a different program to compile</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f /etc/issue <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">distro</span><span class="o">=</span><span class="s1">&#39;ubuntu&#39;</span>
</span><span class='line'>  <span class="nv">apache_apxs</span><span class="o">=</span><span class="s1">&#39;apxs2&#39;</span>
</span><span class='line'>  <span class="nv">apache_conf</span><span class="o">=</span><span class="s1">&#39;/etc/apache2/apache2.conf&#39;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f /etc/redhat-release <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">distro</span><span class="o">=</span><span class="s1">&#39;redhat&#39;</span>
</span><span class='line'>  <span class="nv">apache_apxs</span><span class="o">=</span><span class="s1">&#39;apxs&#39;</span>
</span><span class='line'>  <span class="nv">apache_conf</span><span class="o">=</span><span class="s1">&#39;/etc/httpd/httpd.conf&#39;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># Use the weird apache command to compile and install the apache mod</span>
</span><span class='line'><span class="nv">$apache_apxs</span> -c     <span class="nv">$install_dir</span>/mod_log_firstbyte.c
</span><span class='line'><span class="nv">$apache_apxs</span> -i -a  <span class="nv">$install_dir</span>/mod_log_firstbyte.la
</span></code></pre></td></tr></table></div></figure>


<p>Now that you&#8217;ve complied the module into an so file, you&#8217;ll need to add it to the apache conf. While you&#8217;re in there, you&#8217;ll also want to add the %F directive to your relevant LogFormat lines. Again, adjust for Linux flavor, and LogFormat preferences.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">LoadModule</span> log_firstbyte_module <span class="sx">/path/to/apache/modules/mod_log_firstbyte.so</span>
</span><span class='line'>
</span><span class='line'><span class="nb">LogFormat</span> <span class="s2">&quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b %F&quot;</span> common
</span></code></pre></td></tr></table></div></figure>


<p>For ease of parsing, I recommend putting the %F flag at the end. I&#8217;ve been using a simple php script that runs every few seconds to grep for the last couple lines that have URLs I&#8217;m interested in measuring, pulling the %F off the end of the line, and then sending the value off to <a href="https://github.com/etsy/statsd/">statsd</a>. Keep in mind that the value of %F is in microseconds, so dividing the value by 1000 to give a more reasonable number is helpful.</p>

<p>My script looks a bit like this. What I&#8217;m attempting to do is exclude anything that seems like it&#8217;s a flat file, and only include URLs that are generated by going through my application. YMMV, depending on what your application is and what you want to measure exactly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$log_lines  = array();</span>
</span><span class='line'><span class="x">$cmd        = &quot;tail -n 50 /var/log/httpd/access_log | egrep -v \&quot;css|js|gif|png|jpg|jpeg\&quot;;</span>
</span><span class='line'><span class="x">$statsd_key = &quot;first_byte&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="x">exec( $cmd, $log_lines );</span>
</span><span class='line'>
</span><span class='line'><span class="x">foreach ( $log_lines as $line ) {</span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">  $line_items = explode( &#39; &#39;, $line );</span>
</span><span class='line'>
</span><span class='line'><span class="x">  $firstbyte = $line_items[ count($line_items) - 1 ];</span>
</span><span class='line'>
</span><span class='line'><span class="x">  $firstbyte_ms = ceil( ( $firstybyte / 1000 ) );</span>
</span><span class='line'>
</span><span class='line'><span class="x">  StatsD::timing( $statsd_key, $firstybyte_ms );</span>
</span><span class='line'>
</span><span class='line'><span class="x">} // foreach log lines</span>
</span></code></pre></td></tr></table></div></figure>


<p>And voilà, you now have some very revealing graphs that will tell you exactly your app is performing, completely separate of how the hellion ISPs have decided to perform that moment. My favorite thing about these graphs is that they are an unopinionated view of how the last changes you&#8217;ve made have affected your app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AppArmor, Ubuntu and MySQL]]></title>
    <link href="http://chr.ishenry.com/2013/03/08/apparmor-and-mysql/"/>
    <updated>2013-03-08T22:46:00-05:00</updated>
    <id>http://chr.ishenry.com/2013/03/08/apparmor-and-mysql</id>
    <content type="html"><![CDATA[<p>The other night I was investigating a rather heinous utf8 issue. I was working on a local copy of Ubuntu 12.04 that contained the entire dev environment, except for data. So I exported a copy of the relevant data as a CSV, pulled it down, and attempted to run a <code>LOAD DATA INFILE</code>. Sane enough right? This is something I&#8217;ve done a million times in a bunch of different environments. However, in the vast, vast majority of cases, the error is typically pretty clear. In this case, not so much.</p>

<!-- more -->


<p>The error here was;</p>

<blockquote><p>ERROR 29 (HY000): File &#8216;/home/technician/data.csv&#8217; not found (Errcode: 13)</p></blockquote>

<p>I&#8217;ve been known to have short term memory glitches, so I exited mysql and double checked my path. Three times. After jumping in and out of the mysql shell, I figured there must have been some sort of issue with the placement or permissions of file. Perhaps mysql simply isn&#8217;t allowed to read the file from there. So I moved it over to the /tmp folder. Ubuntu allows everyone to read from there. No dice. So I moved it back to someplace that made sense and chown&#8217;ed it to mysql:mysql still no dice. It was simply as if mysql couldn&#8217;t see the file.</p>

<p>After quite a bit of googling, it turns out a program called AppArmor was blocking mysql&#8217;s access to the filesystem. From the <a href="https://help.ubuntu.com/12.04/serverguide/apparmor.html">AppArmor Wiki</a>;</p>

<blockquote><p>AppArmor is a Linux Security Module implementation of name-based mandatory access controls. AppArmor confines individual programs to a set of listed files and posix 1003.1e draft capabilities.</p></blockquote>

<p>As it turns out, I&#8217;m not the <a href="https://bugs.launchpad.net/ubuntu/+source/mysql-dfsg-5.0/+bug/244406">only</a> <a href="http://ubuntuforums.org/archive/index.php/t-822084.html">one</a> <a href="http://stackoverflow.com/questions/2783313/how-can-i-get-around-mysql-errcode-13-with-select-into-outfile">who</a> had issues with this piece of software. Like any good piece of software fighting the good security fight, it gives <a href="http://en.wikipedia.org/wiki/No_quarter">no quarter</a>, intentionally obfuscating the exact error. For Ubuntu, this is pretty strange behavior. Typically, things in Ubuntu just work, and there aren&#8217;t too many gotchas.</p>

<p>After a bit more Googling, the solution was relatively simple. AppArmor operates by reading in profiles for each piece of software that it monitors. Those profiles have two modes of execution, <a href="https://help.ubuntu.com/8.04/serverguide/apparmor.html">per the docs</a>.</p>

<blockquote><ul>
<li>Complaining/Learning: profile violations are permitted and logged. Useful for testing and developing new profiles.</li>
<li>Enforced/Confined: enforces profile policy as well as logging the violation.</li>
</ul>
</blockquote>

<p>So the only thing we actually have to do to get mysql back in a place where it&#8217;s working as expected is to run the following.</p>

<blockquote><p>$ sudo aa-complain /usr/bin/mysql</p></blockquote>

<p>It&#8217;s great that Ubuntu has enabled this by default, and taken a great step in being secure. However, it feels too heavy handed.</p>

<p>Hope this helps someone!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resignation and Continuity]]></title>
    <link href="http://chr.ishenry.com/2013/02/21/resignation-and-continuity/"/>
    <updated>2013-02-21T20:19:00-05:00</updated>
    <id>http://chr.ishenry.com/2013/02/21/resignation-and-continuity</id>
    <content type="html"><![CDATA[<p>I&#8217;ve always believed that the Church is more a political entity than a faithful one. Ever since my sister&#8217;s Confirmation, when there were three collections, and the sermon admonished parents that every firstborn should be sent to seminary, I have been convinced that church and faith are entirely separately. Reading through history, it&#8217;s clear the papacy is more of a political organization than anything else. The wars, the influence over entire countries to go to war seem more the actions of an organization obsessed with power than one that existed to help people.</p>

<!-- more -->


<p>With Ratzinger bucking the trend of holding the papacy till death, it is even more clear that what should be the peaceful fading away of an old man who has done his service will be turned into political jockeying. One of the more interesting political side effects of Ratzinger&#8217;s decision to resign will be that he will continue to influence the policies of the church until his death.</p>

<p>The new Pope will be in a much different position from previous popes, who had free reign to set policy as he sees. In this case, there will be Ratzinger&#8217;s supporters and the ex-pope himself around to ensure that edicts put in place will stay there. Unlike previous new popes, there will be no clean break in policy. The man who is now closest to God among all other men will be within a stone&#8217;s throw of the man who was closest to God a couple months ago.</p>

<p>The question here will be whether the papacy can continue to move forward with, or will the previous pope continue to be pope. Much like an an employee who suddenly sits up straight and closes the Facebook window when the boss walks in, will the future pope be influenced by the unspoken power dynamic of having a previous pope alive?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching to Octopress]]></title>
    <link href="http://chr.ishenry.com/2013/02/09/switching-to-octopress/"/>
    <updated>2013-02-09T16:08:00-05:00</updated>
    <id>http://chr.ishenry.com/2013/02/09/switching-to-octopress</id>
    <content type="html"><![CDATA[<p>Last month, I decided to refresh my blogging platform. My Wordpress was old and busted, and working on it didn&#8217;t quite fit with the way I wanted to work. I tried tumblr for a few weeks, but it felt pretty constraining. Overall, I was looking for a platform that gave me control, and the ability to crack open the source and do what I wanted.</p>

<!-- more -->


<p>Overall, here were the features I was looking for</p>

<ul>
<li>Display code beautifully, right off the bat.</li>
<li>Add plugins. Maybe even write them myself.</li>
<li>Be able to have all my content organized how I want.</li>
</ul>


<p><a href="http://octopress.org">Octopress</a> was a perfect fit. Working with git, the command line, and markdown are all things that are very familiar to me. There&#8217;s a great community around it, and enough open development around it to support most of the things I want to do. And if the community hasn&#8217;t built it yet, then I can certainly give it a try myself.</p>

<p>The docs on the <a href="http://octopress.org/docs/setup/">Octopress</a> site are really good. Aside from the typical challenges of upgrading Ruby on Mac. <a href="http://www.macports.org/">MacPorts</a> was extremely helpful with the upgrade to Ruby 1.9.3.  Also, the provisioning of a Heroku dyno, and the deploy was as close to painless as it gets.</p>

<p>The migration, however, was not quite as simple. I had plenty of trouble getting my content into tumblr, and I also had a bit of trouble getting it out. Tom Preston-Warner&#8217;s <a href="https://github.com/mojombo/jekyll/wiki/blog-migrations">github wiki</a> was very helpful. However, be aware that the default ruby gems are a little out of date, and the information <a href="https://github.com/mojombo/jekyll/issues/773">this resolved issue</a> helped get around the trouble.</p>

<p>Once the posts were actually imported, there still needed to be a bit of massaging done to get them into shape. The yaml header was using tags instead of categories. In the source/_posts folder, a quick sed command got me what I wanted.</p>

<figure class='code'><figcaption><span>Sed snippet  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="nv">$ </span>sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s/^tags/categories/&#39;</span> *
</span></code></pre></td></tr></table></div></figure>


<p>I do miss my old Wordpress blog, but it was definitely time for a change, as that had been my blog for years. Setting up Octopress has been a great experiment in looking at another language (ruby, and some python), getting more familiar with git, and getting even more acquainted with SublimeText.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[app.net community]]></title>
    <link href="http://chr.ishenry.com/2013/02/09/appnet-community/"/>
    <updated>2013-02-09T12:08:00-05:00</updated>
    <id>http://chr.ishenry.com/2013/02/09/appnet-community</id>
    <content type="html"><![CDATA[<p>The community of app.net is certainly steadfast in their defense of what makes
a great online community, and super eloquent in some cases.</p>

<p><img src="http://chr.ishenry.com/images/user/appnet.png" alt="Community leaders" /></p>

<p>They&#8217;re also not real open to the idea they <a href="https://alpha.app.net/radrad/post/2738575">might be
wrong</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Purpose]]></title>
    <link href="http://chr.ishenry.com/2013/02/07/if-you-simply-ask-a-programmer-to-implement-a-feature-but-fail-to-share-the-purpose-or-the-justification-for-said-feature-all-you-get-is-a-code-monkey-code-monkeys-merely-translate-requirements-into-co/"/>
    <updated>2013-02-07T00:00:00-05:00</updated>
    <id>http://chr.ishenry.com/2013/02/07/if-you-simply-ask-a-programmer-to-implement-a-feature-but-fail-to-share-the-purpose-or-the-justification-for-said-feature-all-you-get-is-a-code-monkey-code-monkeys-merely-translate-requirements-into-co</id>
    <content type="html"><![CDATA[<blockquote><p>If you simply ask a programmer to implement a feature, but fail to share the
purpose or the justification for said feature, all you get is a code monkey.
Code monkeys merely translate requirements into code verbatim. There’s no room
to trade concessions with the designers if I don’t know what you’re trying to
do.</p></blockquote>

<p>&#8211;<a href="http://37signals.com/svn/posts/3392-humans-need-to-know-why">http://37signals.com/svn/posts/3392-humans-need-to-know-why</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Airport Security at it’s finest.]]></title>
    <link href="http://chr.ishenry.com/2013/02/03/airport-security-at-its-finest/"/>
    <updated>2013-02-03T00:00:00-05:00</updated>
    <id>http://chr.ishenry.com/2013/02/03/airport-security-at-its-finest</id>
    <content type="html"><![CDATA[<p><img src="http://chr.ishenry.com/images/user/jfk_security.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RWW's New Design]]></title>
    <link href="http://chr.ishenry.com/2013/01/31/readwritewebs-new-design-of-articles-pages-is-just-an-unpleasant-and-overwhelming-barrage-of-text-and-its-mostly-text-im-not-interested-in-readingtheyve-done-a-great-of-job-of-making-scrolling-distract/"/>
    <updated>2013-01-31T00:00:00-05:00</updated>
    <id>http://chr.ishenry.com/2013/01/31/readwritewebs-new-design-of-articles-pages-is-just-an-unpleasant-and-overwhelming-barrage-of-text-and-its-mostly-text-im-not-interested-in-readingtheyve-done-a-great-of-job-of-making-scrolling-distract</id>
    <content type="html"><![CDATA[<p>ReadWriteWeb’s new design of articles pages is just an unpleasant and overwhelming
barrage of text. And it’s mostly text I’m not interested in reading.</p>

<p>They’ve done a great of job of making scrolling distracting, by ensuring that all
the content that you don’t want to see (related links, blogroll) does something
you don’t expect.</p>

<p><img src="http://chr.ishenry.com/images/user/rww_appnet.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rigoletto]]></title>
    <link href="http://chr.ishenry.com/2013/01/29/rigoletto/"/>
    <updated>2013-01-29T00:00:00-05:00</updated>
    <id>http://chr.ishenry.com/2013/01/29/rigoletto</id>
    <content type="html"><![CDATA[<p>From the <a href="http://www.wqxr.org/#!/blogs/operavore/2013/jan/29%0A/review-metropolitan-operas-rat-pack-rigoletto-hits-jackpot/">WQXR review</a> of Rigoletto at
the Met</p>

<blockquote><p>As much as Verdi has resisted updating, his tale of a nasty hunchback court
jester whose daughter is killed by his own need for revenge arrived here in
the early-&#8217;80s as a gangster movie courtesy of Jonathan Miller and the
visiting English National Opera. More recently in Wales, the Duke of Mantua&#8217;s
decadent court became the Oval Office. Mayer&#8217;s production did everything that
a Las Vegas setting threatens to do — colors never seen in nature, pole
dancing, glitzy satellite chandeliers (not unlike the Met&#8217;s) and even Met
titles with modern English colloquialism. Some wondered aloud why the
translation even bothered to keep names like &#8220;Duke.&#8221; Why not Frank and Sammy?</p></blockquote>

<p>Having never experienced an Opera before, and not knowing anything about the
plot of Rigoletto other than what I read in Playbill, the modern setting and
translation went a long way in helping me understand Verdi. In general, the
few productions I&#8217;ve seen in the past few years have had odd elements
alongside original text that seemed to have been put there to soften the
harshness of unfamiliar colloquialisms. Superhero costumes in Shakespeare, and
even the staging of Rigoletto help to make this otherwise stuffy content
accessible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You’re not going to Eur - o - pee in there? - Jessica]]></title>
    <link href="http://chr.ishenry.com/2013/01/27/youre-not-going-to-eur---o---pee-in-there---jessica/"/>
    <updated>2013-01-27T00:00:00-05:00</updated>
    <id>http://chr.ishenry.com/2013/01/27/youre-not-going-to-eur&#8212;o&#8212;pee-in-there&#8212;jessica</id>
    <content type="html"><![CDATA[<p><img src="http://chr.ishenry.com/images/user/euro_toilet.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH tunnels made easy]]></title>
    <link href="http://chr.ishenry.com/2013/01/27/ssh-tunnels-made-easy/"/>
    <updated>2013-01-27T00:00:00-05:00</updated>
    <id>http://chr.ishenry.com/2013/01/27/ssh-tunnels-made-easy</id>
    <content type="html"><![CDATA[<p>One of the classic problems in administering databases is providing secure,
yet accessible tools for all those who need to run queries or examine
production data. Classically, phpMyAdmin has been a great tool for handling
MySQL for those who don&#8217;t know the command line. However, as any sysadmin
worth his salt knows, it&#8217;s an extremely insecure tool for a couple of reasons.</p>

<ul>
<li>It requires php, and specific modules, which is just one more thing to install.</li>
<li>It requires apache.</li>
<li>Apache requires port 80 to be open.</li>
</ul>


<p>All of these things are bad, since garden variety attackers and script kiddies
can potentially find your phpmyadmin installation. Since phpMyAdmin is open-
source, and freely available, there always likely to be security holes. One of
the best ways around this is to close phpMyAdmin off to the public via
firewall, and then use an SSH tunnel to pass traffic through another server.
The server hosting mysql and phpMyAdmin can safely stay hidden, with all ports
closed.</p>

<p><img src="http://chr.ishenry.com/images/user/ssh_tunnel_diagram.gif" alt="Diagram, showing the flow of traffic between client and secure mysql server.
" /></p>

<p>Set up looks something like this (on a Mac, at least).</p>

<ol>
<li><p>Install <a href="http://www.macports.org/install.php">MacPorts</a></p></li>
<li><p>Install Xcode command line dev tools.</p></li>
</ol>


<blockquote><p>Open Xcode -> Preferences -> Downloads -> Command Line Tools</p></blockquote>

<ol>
<li>Install <a href="http://www.harding.motd.ca/autossh/">autossh</a> , which is a tool for opening an ssh connection, and making sure it stays open. I use MacPorts to install it. <a href="http://www.macports.org/">http://www.macports.org/</a></li>
</ol>


<blockquote><p>$ sudo port install autossh</p></blockquote>

<ol>
<li>Once that&#8217;s installed, you can run something like this. (Make sure that the port is the port that you configured Apache to accept traffic on.)</li>
</ol>


<blockquote><p>autossh -M 20002 -f -L 7422:your.db.served.biz.org:7422 your.jump.server.biz
&#8220;sleep 99999999999&#8221;</p></blockquote>

<ol>
<li>From there, you can open phpMyAdmin at a URL like http://localhost:7422/phpMyAdmin. One very convenient way to wrap all this up is to use the automator app.</li>
</ol>


<p><img src="http://chr.ishenry.com/images/user/ssh_tunnel_auto.png" alt="Automator screenshot" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rules for London]]></title>
    <link href="http://chr.ishenry.com/2013/01/26/rules-for-london/"/>
    <updated>2013-01-26T00:00:00-05:00</updated>
    <id>http://chr.ishenry.com/2013/01/26/rules-for-london</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I took a trip to London and Paris. It was my first trip to
Europe. Having never been to Europe, or on a real vacation for the last couple
years, I was really looking to maximize my time there. So I had a couple rules
while for I was there;</p>

<ol>
<li>Have a long list of things to do, but no plan.</li>
<li>Walk or take public transportation everywhere.</li>
<li>Get to know the neighborhoods I&#8217;m staying in.</li>
<li>If something looks interesting, do it.</li>
<li>Don&#8217;t be an #uglyamerican.</li>
</ol>


<p>As it turns out, those were some really great rules. The last thing I wanted
in a vacation was a schedule. Plus, if we got involved in something, and took
more time than we thought, it wouldn&#8217;t matter. And following rule #2 the
entire and rule #4 the entire trip, there were plenty of things that we found
along the way that took up more time than we thought. The <a href="http://www.camdenlock.net/stables/index.html">Camden
Stalls</a>, for example, were full
of treasures and side alleys to explore.</p>

<p>Rule #2 turned out to be pretty great for a bunch of reasons. The London tube
is super efficient, clean, and has wifi. The only drawback of the Underground
is that it closes early, as does most of London. Walking a city is really the
only way to really get to know a city. Also, getting lost is the best way to
find the really cool stuff.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FizzBuzz-a-thon]]></title>
    <link href="http://chr.ishenry.com/2012/12/10/fizzbuzz-a-thon/"/>
    <updated>2012-12-10T00:00:00-05:00</updated>
    <id>http://chr.ishenry.com/2012/12/10/fizzbuzz-a-thon</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.codinghorror.com/blog/2007/02/why-cant-programmers-%0Aprogram.html">FizzBuzz</a> test is a simple way of showing that a developer has mastery of
basic concepts like loops, variables and operators. Having given the test to
other developers several times, I felt like a bit of hypocrite having never
actually having taken it myself. I&#8217;ve also asked folks to complete the task in
php, even though it wasn&#8217;t a language they were particularly familiar with.
So, I decided it was time to end the hypocrisy, and give myself a little
challenge:</p>

<p><strong>Do FizzBuzz in as many languages as I could.</strong></p>

<p>So, what did I learn?</p>

<ul>
<li>With the <a href="http://chr.ishenry.com/2011/06/13/development-without-internet-access/">internet</a>, you can learn the basics of most programming languages in about 5 minutes.</li>
<li>Programming knowledge is portable between most common web languages. A loop is a loop, a variable is a variable, etc. Syntax for a task this simple can be learned in a few minutes.</li>
<li>FizzBuzz <em>can</em> be done in sql, bitch.</li>
<li>Clojure is hard for no reason.</li>
<li>Lisp is basically impossible to get running.</li>
<li>Languages have uptake because they&#8217;re included with the OS and have good documentation and communities.
In the end, doing FizzBuzz in 10 languages took around 5 hours. There was,
however, significant time taken for screwing around on Twitter, potty breaks,
drinking too much coffee, <a href="http://stackoverflow.com/questions/13536889/php-works-but-%0Agives-sql-syntax-error/13536929#comment18536820_13536929">curmedgeon-ing on
StackOverflow,</a> drinking beer, and
making carnitas. Time was also spent looking for a way to run my FizzBuzzes in
bash and benchmark them, which proved fruitless, since OS X doesn&#8217;t support
nanoseconds in the date command.</li>
</ul>


<p>For a closer look at the code, take a look at the <a href="https://github.com/chrishenry/fizzbuzz">github
repo.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Care + Feeding of a MongoDB Cluster]]></title>
    <link href="http://chr.ishenry.com/2012/10/14/the-care--feeding-of-a-mongodb-cluster/"/>
    <updated>2012-10-14T00:00:00-04:00</updated>
    <id>http://chr.ishenry.com/2012/10/14/the-care&#8211;feeding-of-a-mongodb-cluster</id>
    <content type="html"><![CDATA[<p>Thanks to all those who came to my last two MongoDB Skillshare classes. For
those interested, here are the slides.</p>

<p><strong> <a href="http://www.slideshare.net/chrishnry/the-care-feeding-of-a-mongodb-cluster">The Care + Feeding of a Mongodb Cluster</a> </strong> from <strong><a href="http://www.slideshare.net/chrishnry">Chris Henry</a></strong></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/14725427" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/chrishnry/the-care-feeding-of-a-mongodb-cluster" title="The Care + Feeding of a Mongodb Cluster" target="_blank">The Care + Feeding of a Mongodb Cluster</a> </strong> from <strong><a href="http://www.slideshare.net/chrishnry" target="_blank">Chris Henry</a></strong> </div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[app.net, I smell a pattern]]></title>
    <link href="http://chr.ishenry.com/2012/08/19/appnet-i-smell-a-pattern/"/>
    <updated>2012-08-19T00:00:00-04:00</updated>
    <id>http://chr.ishenry.com/2012/08/19/appnet-i-smell-a-pattern</id>
    <content type="html"><![CDATA[<p>After being pummeled into submission by 42924 tweets about
<a href="https://join.app.net/">app.net,</a> I finally decided it was time to take a look
at what seemed like a very popular concept. If (IF) I understand correctly,
app.net is an attempt to reboot Twitter. The aim is to build a realtime social
feed free from the shackles of advertising, and instead a focus on creating an
experience tailored to its users and developers. Also, there seems to be a $50
cover.</p>

<p>Frankly, this undertaking seems ill advised, as does asking a bunch of people
for $50 for a username. App.net is taking on the giants of the Internet who
have worked for years to build product, developer community, etc. Having
worked with Twitter&#8217;s APIs, I can say that Twitter has done a fantastic job of
advocating for developers and providing them the tools and data to innovate. I
can also say that I actually haven&#8217;t noticed much impact from advertising, and
I consider myself a pretty heavy Twitter user. I also tend to have a hard time
differentiating between Rob Delaney&#8217;s
<a href="https://twitter.com/Charmin/status/231413266251907073">digital</a>
<a href="https://twitter.com/HomeDepot/status/235083704358301697">harassment</a> and
properly promoted tweets.</p>

<p>Looking back, this project doesn&#8217;t seem all that different from
<a href="https://joindiaspora.com/">Diaspora</a>. A small team aggravated with certain
aspects of larger services that they love puts out an app that is viable, but
is really a carbon copy of the original, with their own special twist.
Diaspora and App.net both want their users to have control over privacy, data,
and how much advertising is shoved in their face. Currently, Diaspora seems to
be completely off the radar, having made practically no dent in addressing its
original goals.</p>

<p>Building a product to address a flaw in someone else&#8217;s product seems to be a
fools errand, particularly when the giants of real time social feeds are well
ensconced. Building a competitor product also doesn&#8217;t seem like a great way to
convince the Internet that advertising is bad. Also, the Internet doesn&#8217;t
really need convincing that ads are bad. I&#8217;m relatively sure that based on
diving click throughs, nonexistent conversion, and the mere existence of
banner blindness that Internet advertising industry also knows that its days
are numbered. Interestingly enough, the most fertile area of brand awareness
actually seems to be around using real time social media to engage in simple,
human ways. So I&#8217;m not sure how cutting brands out of the business model will
help here.</p>

<p>What surprises me most about the existence of app.net is how blatantly it
reinvents the wheel. The alpha was put out to show backers there was a real
app behind the video. However, aside from proving they can convince folks that
advertising control is bad, the actual app doesn&#8217;t really do anything
innovative or different, at least that I can see. OK, you got me, there&#8217;s
[data export|http://daltoncaldwell.com/we-did-it]. Realistically, this is an
alpha, there&#8217;s virtually no data to export, so I would hardly consider this a
marvel of engineering. When Diaspora came onto the scene, they had actually
built something different, and innovative. Even Identi.ca attempted to
<a href="http://identi.ca/doc/faq">differentiate themselves</a> in functionality.</p>

<p>This entire project reeks of misdirected energy, and a &#8221;<a href="http://www.richard-banks.org/2007/07/built-here-syndrome.html">not built
here</a>&#8221;
mentality. Granted, I&#8217;m a huge fan of building things that make you happy,
it&#8217;s part of what keeps me going as a developer. Truthfully, the thing I love
most about being a developer is that I can build whatever the fuck I want,
whether it helps, hurts, solves a problem, or complicates stuff. However, I
just can&#8217;t help but feel this entire project is a form of lashing out. It
feels destructive to me to rally a group of smart people off of a platform
that&#8217;s working well because of some flaws. Flaws which are really inherent
challenges building business on the Internet. I feel like a more effective
method of changing the environment would&#8217;ve been creating better ways to
monetize without having to resort to advertising.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL's INSERT SELECT, Replication, and You]]></title>
    <link href="http://chr.ishenry.com/2012/08/13/mysqls-insert-select-replication-and-you/"/>
    <updated>2012-08-13T00:00:00-04:00</updated>
    <id>http://chr.ishenry.com/2012/08/13/mysqls-insert-select-replication-and-you</id>
    <content type="html"><![CDATA[<p>Whenever there are situations where data needs to be copied from table to
table, or SELECTing lots of rows to be inserted, the <a href="http://dev.mysql.com/doc/refman/5.5/en/insert-select.html">INSERT
SELECT</a> is an
elegant solution. It reduces the number of queries sent to a MySQL server, and
makes for elegant code. Additionally, with INSERT SELECTs, all processing
happens on the MySQL side. The app doesn&#8217;t have to deal with having any of the
data in memory. This means that application servers can be run with less
memory.</p>

<p>Unfortunately, INSERT SELECT&#8217;s best use cases coincide with cases where the
SELECT query has the potential to run a long time. On standalone servers
running InnoDB, this can be fine, as reads and writes will continue to execute
concurrently. However, if you&#8217;re running MyISAM, queries will lock, and
nothing will execute. Instead, queries will queue up, your application will
come to a dead halt, MySQL will likely hit max_connections and Very Bad Things
will happen.</p>

<p>In <a href="http://dev.mysql.com/doc/refman/5.5/en/replication-%0Aimplementation.html">replicated</a> environments, even well tuned ones running on InnoDB, a
long running INSERT SELECT can cause other sorts of problem. MySQL replication
is statement based. In other words, every statement that writes to disk on the
master is written to a log. The log is then transferred to slave(s), and those
statements are replayed on the slaves.</p>

<p>With INSERT SELECTS, every slave needs to run the same SELECT. The master will
not simply pass on the results of the SELECT, but rather simply pass the same
query to be executed by the slave(s). So in a replicated environment, it&#8217;s
even more important to keep an eye on how long those INSERT SELECTS are
running. Not only is it a waste of processing power to run the SELECT portion
of the query across the entire cluster, the SELECT will actually block other
statements in the log from executing. This means that the data on the slaves
will become out of sync with the master, a condition called slave lag.</p>

<p>INSERT SELECT is a great tool, but beware of the costs of using it in certain
situations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gallow Green is still a bit...green]]></title>
    <link href="http://chr.ishenry.com/2012/07/28/gallow-green-is-still-a-bitgreen/"/>
    <updated>2012-07-28T00:00:00-04:00</updated>
    <id>http://chr.ishenry.com/2012/07/28/gallow-green-is-still-a-bitgreen</id>
    <content type="html"><![CDATA[<p>Since seeing <a href="http://www.sleepnomore.com/">Sleep No More</a> a year ago, I&#8217;ve
been a huge fan of the rich, immersive experience put together by
<a href="http://www.punchdrunk.org.uk/">Punchdrunk</a>.  I loved the dreamy feeling of
walking through an entire other world, inhabited by scared, angry, jealous
shadows running, fighting and going insane. The Manderley bar, within the
hotel, was an amazing experience, no less detailed than the rest of the hotel.
The absinthe punch, in particular, is a fantastic drink, dark and complex,
that perfectly compliments the experience.</p>

<p>Upon hearing that they were opening a rooftop bar at the McKittrick Hotel
called <a href="http://www.mckittrickhotel.com/gallowgreen/">Gallow Green</a>, I
instantly bought tickets and eagerly awaited the night. The entrance was
similar to that of Sleep No More. After a short wait, you&#8217;re ushered into a
small elevator that opens into a open floor with a coat check and a set of
stairs to the roof. The rooftop garden is spacious, romantically lit, and
beautifully decorated. Somehow or other, they also managed to get old rail car
up there, too.</p>

<p>My night at Gallow Green didn&#8217;t quite have the same magic as my previous
visits to the McKittrick. While I did not try any of the punches, the
cocktails were disappointing. The Third Degree, a gin cocktail, tasted so
strongly of warm Tanqueray that it was close to undrinkable. The Pimms Other
Cup, a murky mixture of Pimms, dark rum, lemonade and a cucumber slice was
potable, but only as a result of the lemonade. I&#8217;m not sure if this was the
result of a bartender having an off night, or that the cocktails are just
poorly conceived.</p>

<p>While the space was beautiful, it seems the night I was there, a private party
had booked an event. My wait at the door was plagued by demands of a very
entitled gentlemen, who claimed he was very important to the party. After
getting cocktails, we sat down at a table marked reserved, assuming our
reservation entitled us to a &#8216;Reserved&#8217; table. A waitress, after asking if we
were part of the party, shooed us after a few minutes, leaving Jessica and I
scurrying to find a place to sit. Luckily, we found a somewhat hidden swing a
few steps away from the bar, which we camped out on all night.</p>

<p>While the right elements are there for Gallow Green to be a fantastic
experience, my night did not reflect that. However, I&#8217;m likely to go back,
given the incredible quality of everything else in the hotel. Hopefully, my
next reservation at the McKittrick will occur on a better night.</p>
]]></content>
  </entry>
  
</feed>
