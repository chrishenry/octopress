<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Technician]]></title>
  <link href="http://chr.ishenry.com/atom.xml" rel="self"/>
  <link href="http://chr.ishenry.com/"/>
  <updated>2015-12-21T17:42:06-05:00</updated>
  <id>http://chr.ishenry.com/</id>
  <author>
    <name><![CDATA[Chris Henry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Volunteering at Hour of Code]]></title>
    <link href="http://chr.ishenry.com/2015/12/17/volunteering-at-hour-of-code/"/>
    <updated>2015-12-17T22:48:00-05:00</updated>
    <id>http://chr.ishenry.com/2015/12/17/volunteering-at-hour-of-code</id>
    <content type="html"><![CDATA[<p>Yesterday, as part of the Hour of Code, I went to <a href="http://ithsnyc.org/2013/home">Information Technology High
School</a> in Long Island City. I spent the morning
talking to students about what it&#8217;s like to work in Web Operations.</p>

<p>It was amazing seeing students taking an interest in technology and coding. Many
of them had already completed the <a href="https://hourofcode.com/us">Hour of Code</a>
projects. Others were still tinkering, seeing what they could add and change. I
spent some time critiquing and reviewing work they had done in Mrs. Ramirez&#8217;s
Web Design class. The students had all created functional portfolio sites,
complete with content, small bits of javascript, and even Flash games.</p>

<p>The students were interested in my day to day, and the path I took to get
where I am in my career. The students were amazed to hear that I didn&#8217;t work in
a dark closet by myself, but in a brightly lit office constantly interacting
with colleagues. They were also amazed to hear that the skills they needed to be
truly successful in tech weren&#8217;t just coding and hardware, but communication,
teamwork, and judgment. How a college education fit in to a career in Web
Operations came up a few times. It was particularly interesting because I&#8217;m not
aware of any four year university that offers a program in the field.</p>

<p>Students were particularly interested to hear about about some of the
work I&#8217;ve done around security and incident response. Tales of defending
against <a href="http://chr.ishenry.com/2013/07/29/what-it-feels-like-to-be-ddosed/">DDoS</a>
and spam attacks were a great way to let them know that career paths in tech
aren&#8217;t just limited to coding or back office IT. They were spellbound to hear
that mitigating DDoS attacks were actually something that could be part
of an actual career path, and not just something they see in TV and movies. I
truly hope that some students are inspired to pursue a career in Systems
Administration and Web Operations.</p>

<p>One thing that was made clear to me as I was asked to describe my path to Web
Operations was there is no clear path, and that sad fact has resulted in a
shortage of people in the field. I would encourage other folks in Web Operations
to spend some time talking to young students about the work that we do in the
hopes that in a few years the industry will grow and mature. After all, for
every class that learns to code, there need to be a few students who know
how to run the infrastructure for that code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Tags as a Lightweight Datastore]]></title>
    <link href="http://chr.ishenry.com/2015/11/29/aws-tags-as-a-lightweight-datastore/"/>
    <updated>2015-11-29T14:36:00-05:00</updated>
    <id>http://chr.ishenry.com/2015/11/29/aws-tags-as-a-lightweight-datastore</id>
    <content type="html"><![CDATA[<p>One of the most common tasks in administering clusters of machines is running
regular tasks on individual machines in a cluster. For example, Cassandra
benefits greatly from running repairs on individual nodes to ensure data
consistency. Operating manually, an ops team would maintain a document of when
each machine has been, and look at that to determine which machine should be
repaired next.</p>

<p>However, in a world where there could be hundreds of machines, this quickly
becomes unscalable. Even with only a handful of machines, a team could spend a
ton of energy and time simply remembering where the source of truth lives and
how to decide which machine should be repaired next.</p>

<!-- more -->


<p>A team could write some code to pick a node and run the necessary commands. This
is a bit better, but the requirement is that the command runs regularly on each
node in the cluster. Without a central record to track which nodes have been
repaired, there&#8217;s no way to know when and where the last repair was run, and no
way to accurately predict which node will be picked next.</p>

<p>Enter
<a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">AWS EC2 Tags</a>.
While EC2 tagging has some restrictions, it&#8217;s an ideal place to register small
bits of metadata and completely replace our old school document. For our
Cassandra example, it&#8217;s easy enough to use the EC2 APIs to list all machines in
an Autoscale Group, or by tag, and then apply some logic to pick a machine.</p>

<p>Here&#8217;s some sample code that will look at the instances in an ASG, and pick one
that either hasn&#8217;t been repaired, or the node repaired the longest time ago.</p>

<figure class='code'><figcaption><span>Find least recently repaired node </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">boto.ec2</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">boto.ec2.autoscale</span>
</span><span class='line'>
</span><span class='line'><span class="n">ec2</span> <span class="o">=</span> <span class="n">boto</span><span class="o">.</span><span class="n">ec2</span><span class="o">.</span><span class="n">connect_to_region</span><span class="p">(</span><span class="s">&#39;us-east-1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">asg</span> <span class="o">=</span> <span class="n">boto</span><span class="o">.</span><span class="n">ec2</span><span class="o">.</span><span class="n">autoscale</span><span class="o">.</span><span class="n">connect_to_region</span><span class="p">(</span><span class="s">&#39;us-east-1&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="o">=</span> <span class="n">asg</span><span class="o">.</span><span class="n">get_all_groups</span><span class="p">(</span><span class="n">names</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;your-asg&quot;</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">instance_ids</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="o">.</span><span class="n">instance_id</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">group</span><span class="o">.</span><span class="n">instances</span><span class="p">]</span>
</span><span class='line'><span class="n">instances</span> <span class="o">=</span> <span class="n">ec2</span><span class="o">.</span><span class="n">get_only_instances</span><span class="p">(</span><span class="n">instance_ids</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Find instances without a `last-repaired` tag</span>
</span><span class='line'><span class="k">for</span> <span class="n">instance</span> <span class="ow">in</span> <span class="n">instances</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;last-repaired&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">instance</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Found an instance without last-repair tag&quot;</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">instance</span>
</span><span class='line'>        <span class="nb">exit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Sort instances by date asc, which is oldest first</span>
</span><span class='line'><span class="n">sorted_instances</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">instances</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">instance</span><span class="p">:</span> <span class="n">instance</span><span class="o">.</span><span class="n">tags</span><span class="p">[</span><span class="s">&#39;last-repaired&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Found oldest repair: &quot;</span> <span class="o">+</span> <span class="n">sorted_instances</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'><span class="k">print</span> <span class="n">sorted_instances</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">tags</span><span class="p">[</span><span class="s">&#39;last-repaired&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above snippet is based on the venerable
<a href="http://boto.readthedocs.org/en/latest/">boto</a> library. Using python for
interfacing with AWS allows you to use a mature, well-tested library. You can
even write tests against code that uses boto with a library of mocks called
<a href="https://github.com/spulec/moto">moto</a>. In short, it looks for instances that
haven&#8217;t been operated on first. This is to cover the situation where you have a
brand new cluster, or when the ASG group replaces nodes. Secondly, it sorts the
instances by the date of the last repair ascending, which gives you the oldest
node at the zeroth element of the list.</p>

<p>Taking this approach to managing infrastructure allows you create simple,
testable code with very few dependencies. Had <code>last-repair</code> data been stored in
a local database, it would require the team to create and maintain that
database, as well as write and test additional code. The team is now free to
spend that time on other things. Without needing to worry about the integrity of
a persistent datastore, it also means that this script can reliably be run on a
very ephemeral instance. In fact, it can be run from anywhere. Scheduled Jenkins
jobs would be a good way to run this, but with the advent of
<a href="http://docs.aws.amazon.com/lambda/latest/dg/getting-started-scheduled-events.html">Scheduled Lamdbda tasks</a>,
an Ops team can cut down even further on dependencies required to perform
maintenance tasks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Burnout]]></title>
    <link href="http://chr.ishenry.com/2015/11/07/burnout/"/>
    <updated>2015-11-07T18:31:00-05:00</updated>
    <id>http://chr.ishenry.com/2015/11/07/burnout</id>
    <content type="html"><![CDATA[<p>It was 4:43 PM. As I headed out the door, someone asked, &#8220;Leaving early?&#8221; No
malice, no judgment, just a bit of surprise. The office was still full,
keyboards clicking and the drone of technical conversation dully throbbing. &#8220;I&#8217;m
entitled to it, I just worked an incident for 3 days straight,&#8221; I shot back.</p>

<p>Was I entitled to bail early? Probably, but that wasn&#8217;t the right way to say it.
I <strong>needed</strong> to leave. Despite handling the incident deftly, I still felt
fucking awful, and in a dark, looming, nonspecific way. I needed to run from the
firehose of problems, lack of solutions, apathy and anxiety. The incident in
question was a days-long spam attack. It wasn&#8217;t my first rodeo with hackers, but
this mitigation required bringing several groups together, which is always a
challenge at a large organization. To add to that, there was a pronounced lack
of resources from my own team. This attack came at a time when we were gearing
up to launch a new product, and the team was completely focused on it. Even I
had been intensely involved with ensuring the stability of a new, shaky
platform. Being pulled away just added to my frustration.</p>

<p>I had already spoken with my manager that afternoon, told him I was tired. He
kindly ordered me to go home, and take a vacation. I took the next two days off,
calling in sick. This was the second time in a month I&#8217;d unexpectedly needed
time off. At home, I crashed, played video games, watched a bunch of shitty
movies my girlfriend normally wouldn&#8217;t palate, and generally just tried to avoid
the real world. Physically, I wasn&#8217;t all that tired, considering I had only
slept 9 hours or so over the past 3 days. But my mind and nerves were totally
shot, and worse, I felt like I didn&#8217;t care, which I hated myself for.</p>

<p>In short, I burned out. Hard.</p>

<!-- more -->




<blockquote><p>Burnout is a state of emotional, mental, and physical exhaustion caused by<br/>excessive and prolonged stress. It manifests itself in ways including anxiety,<br/>loss of motivation and confidence, and even degradation of physical health.<br/>Burnout can be prevalent in organizations that promote hero culture and where<br/>employees maintain a strong a sense of duty&#8230;</p></blockquote>


<p>&#8212; <a href="http://burnout.io/">Burnout.io</a></p>

<p>I lead operations at a small part of a large company, and I&#8217;ve been there a very
long time. My mission is to ensure the company&#8217;s online presence is up and
safe. Admittedly, my sense of duty to the mission has always been somewhat
overzealous. In fact, much of my identity is tied up in the job I do. Those
sentiments have truly been assets in navigating a treacherous path, but it
seemed clear that they have become a double edged sword. Once I got bored with
Xbox, I went through a journal I&#8217;ve been keeping for a few years.</p>

<p>In it, there were multiple notes and rants pointing to the simple fact that I
have an unhealthy work-life balance. I found a long running list of songs to
learn on guitar, but I haven&#8217;t picked up my guitar in several months. I have
notes on code projects I started but didn&#8217;t make any progress on for years.
There are links to museum exhibits I wanted to visit that closed long ago.
Reading through, I also realized I don&#8217;t have any more than a handful of friends
outside of work. All in all, it was a pattern of regret.</p>

<p>But also a lot of reasons to make some changes. Burnout is caused by a
combination of internal and external factors, some of which can be managed. My
biggest realization, looking through my past, is that I don&#8217;t need a vacation, I
need a change in how I manage my energy with regard to my sense of duty to my
work. I need to be more cognizant of how I feel when external factors rear
their head, recognize signs of nearing the burnout zone, and back away.
Presented without comment, are my signs of burnout;</p>

<ul>
<li>Saying &#8220;No&#8221; to everything, even the reasonable things</li>
<li>Shortness with team members during normal interactions</li>
<li>Feeling like I&#8217;ve made no forward momentum</li>
<li>Inability to express myself</li>
<li>Constant <a href="https://en.wikipedia.org/wiki/Amygdala_hijack">amygdala hijack</a></li>
<li>Inability to stay on task, or read anything longer than an email</li>
<li>Many nights in a row falling asleep while attempting to watch the same
episode of John Oliver</li>
</ul>


<p>Things I need to do to prevent getting to this place in the future;</p>

<ul>
<li>Tightly limit my hours</li>
<li>Let go of, or delegate certain things that I just don&#8217;t need to do</li>
<li>Be OK with things not happening, and the failures that result</li>
<li>Commit to things I want to do; cooking, music, projects, and social events</li>
<li>Don&#8217;t accept any new work unless I truly have the capacity to do it</li>
</ul>


<p>The other hard reality is that for me to affect this change, I will need to
attempt to manage the external factors. There are going to be some failures, but
I&#8217;ll need to be OK with that, or I&#8217;ll have to make bigger changes. I truly love
what I do, but now is the time for me to take some of myself back.</p>

<p>Wish me luck.</p>

<p>A few great burnout resources that helped me write this;</p>

<ul>
<li><a href="http://burnout.io/">burnout.io</a></li>
<li><a href="http://kentnguyen.com/personal/getting-rid-burnouts/">Getting rid of burnout</a></li>
<li><a href="https://www.usenix.org/node/186465">Burnout and Ops; Lars Lehtonen</a></li>
<li><a href="https://vimeo.com/104252736">From Hero to Zero; Jennifer Davis</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chat and Dense Communication]]></title>
    <link href="http://chr.ishenry.com/2015/08/30/slack/"/>
    <updated>2015-08-30T10:13:00-04:00</updated>
    <id>http://chr.ishenry.com/2015/08/30/slack</id>
    <content type="html"><![CDATA[<p>If you haven&#8217;t noticed, communication among teams (distributed or local) is a
thing that people care a lot about. For my team, we specifically care about
density of quality communication across mediums. We&#8217;re an ops team, and
being able to broadcast status and information is critically important. As we
work, we don&#8217;t want to have to re-communicate across mediums, but we still want
to make sure the right people hear us and provide feedback.</p>

<p>As our team was searching for ways to accomplish this, we started using the
ubiquitous and humble webhook to push information between systems. At first,
we simply started pushing Pull Request comments into our Slack channel. This
immediately increased our velocity, as we found ourselves seamlessly moving
discussions from traditionally asynchronous mediums (Github Pull Requests) to
more real time mediums (Slack, In Person).</p>

<!-- more -->


<p>Eventually, we started adding more sources to chat via Slack integrations. Our
project tracking tool was a clear next step, as most of the information we
were pouring into it was helpful to others. Team members reacting to status
updates with pointers and questions was yet another boost to velocity of
information. Including brief comments of intent and even full blown
plans gave us a hook for correcting mistakes before they even happened.</p>

<blockquote><p><b>Dense Communication</b> - Extremely high signal to noise ratio textual<br/>information that&#8217;s automatically compiled from different sources and intended to<br/>cross mediums.</p></blockquote>


<p>The flip side of this was that looking through our chat was like drinking from a
firehose. There was an immense amount of fragmented, context-less information
flowing at any given time, so much so that it was easy to drown. The uninitiated
considered our channel noisy, which is a fair assessment. Those who didn&#8217;t have
access to the cornucopia of links ubiquitous to our channel had an even harder
time trying to make sense of things. Some even believed the noise was
distracting.</p>

<p>However, for those of us deep in the shit, we found that we were on the same
page more frequently. In person communication became high trust, where one
speaker could say the wrong thing and the listener could hear the right thing,
thanks largely to shared context. We found ourselves responding to status
updates made via integrations with helpful suggestions, requests to clarify,
corrections, etc. Proposed plans were reviewed earlier, and noted blocks
were busted more quickly. In general, we reacted more, contributed more, and as
a result, had better outcomes.</p>

<p>To critics of these practices, we say that <a href="https://twitter.com/postwait/status/637935373327446016">team productivity is more important
than individual productivity</a>.
As humans walk down the streets of New York, there are a million stimuli, some
gross, and some deadly. To say that people can&#8217;t read and filter a few lines of
text is a cop out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Note on Amazon Autoscale Groups]]></title>
    <link href="http://chr.ishenry.com/2015/08/26/a-note-on-amazon-autoscale-groups/"/>
    <updated>2015-08-26T22:04:00-04:00</updated>
    <id>http://chr.ishenry.com/2015/08/26/a-note-on-amazon-autoscale-groups</id>
    <content type="html"><![CDATA[<p>AWS provides auto scaling to allow applications to scale up and
down to meet demand. <a href="https://aws.amazon.com/autoscaling/">Autoscaling</a> is an
excellent tactic for ensuring that an application can add and remove capacity
based on demand. Autoscale policies can be infinitely tuned to use anything that
can be recorded by CloudWatch. However, autoscale groups are also incredibly
useful for ensuring that a set number of instances is always available. This can
be accomplished by omitting scaling policies.</p>

<!-- more -->


<p>But for some reason, AWS users seem to shy away from using autoscale groups for
anything but satisfying elastic demand. However, in my experience, autoscale
groups are a critical component of <em>any</em> highly available deployment. Even
deployments of a single instance.</p>

<p>The utility of a service that does nothing but ensure that the desired number of
instances available is the basis for creating self healing infrastructure.
However, the name <code>Auto Scaling</code> has created a widely held opinion that the
number of instances must regularly change to make use of the service.
This is simply not true.</p>

<p>For example, you may find a situation where you need to ensure high availability
for an application only built to run on a single server. Or you may have a
snowflake server, or an application where it&#8217;s not worth having more than one
instance. Instead of creating a standalone instance, you can create an autoscale
group with min, max and desired set to 1. As long as proper automation is in
place, and the application is a proper <a href="http://12factor.net/">12 factor app</a>,
the autoscale group will ensure there&#8217;s always a single instance available.</p>

<p>As a design principle, any infrastructure created should have the means to heal
itself. Don&#8217;t be put off by the name <code>Auto Scaling</code>, as the utility and value of
keeping a single instance running (that doesn&#8217;t need to scale) using a well
understood and easily accessible service is worth it&#8217;s weight in gold.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FizzBuzz in Go and Rust]]></title>
    <link href="http://chr.ishenry.com/2015/06/26/fizzbuzz-in-go-and-rust/"/>
    <updated>2015-06-26T19:23:00-04:00</updated>
    <id>http://chr.ishenry.com/2015/06/26/fizzbuzz-in-go-and-rust</id>
    <content type="html"><![CDATA[<p>My team and I attended DockerCon earlier this week. We went with the intention
of taking time at the hackathon to spend some time digging into what it would be
like to operate services running on Docker &amp; CoreOS. Part of the challenge
of CoreOS is that there isn&#8217;t a package manager, which makes installing any
modern programming language difficult. The only way to execute code is to drop a
binary on the machine or to run code in a Docker container.</p>

<p>Therefore, it made a lot of sense to take some time to experiment with both Go
and Rust. It was also a ton of fun to play with some new ideas. To get a grasp
of the basics, I looked to the tried and true <a href="http://c2.com/cgi/wiki?FizzBuzzTest">FizzBuzz</a>.
FizzBuzz is a great exercise because it forces you to loop, use control logic
(if/else or case), and understand some basic math operators.</p>

<!-- more -->


<h2>Rust</h2>

<p><a href="http://www.rust-lang.org/">Rust</a> bills itself as a language for <a href="https://en.wikipedia.org/wiki/System_software">systems
programming</a>. While I didn&#8217;t get
far enough to determine if that was true, I did get far enough to determine that
Rust is relatively difficult to work with, in that it requires a compilation
step &amp; a run step before you can see the outcome of your code.</p>

<figure class='code'><figcaption><span>Run a rust program</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>± |master ✗| → rustc fizzbuzz.rs
</span><span class='line'>± |master ✗| → ./fizzbuzz
</span></code></pre></td></tr></table></div></figure>


<p>It was also a bit awkward in that creating an effective code &rarr;
execute workflow required installing <a href="https://crates.io/">Cargo</a> to manage the
very small package I created. Compilation was a bit on the slow side as well,
considering I only wrote 25 lines of code.</p>

<figure class='code'><figcaption><span>Run my rust fizzbuzz program</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>± |master ✗| → <span class="nb">time </span>cargo run
</span><span class='line'>   Compiling rust v0.1.0 <span class="o">(</span>file:///Users/chrishenry/Code/fizzbuzz/rust<span class="o">)</span>
</span><span class='line'>     Running <span class="sb">`</span>target/debug/rust<span class="sb">`</span>
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'><span class="o">[</span>....<span class="o">]</span>
</span><span class='line'>Buzz
</span><span class='line'>
</span><span class='line'>real  0m0.363s
</span><span class='line'>user  0m0.292s
</span><span class='line'>sys   0m0.067s
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/chrishenry/fizzbuzz/tree/master/rust">Here&#8217;s my implementation</a>.</p>

<h2>Go</h2>

<p><a href="https://golang.org/">Golang</a> is an open source, statically-typed language
that&#8217;s been designed to make it straight forward to build reliable and efficient
software. That&#8217;s what it says on the tin, and happily, that was my experience.
Go is simple to compile and run.</p>

<figure class='code'><figcaption><span>Run my go fizzbuzz program</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>± |master ✗| → <span class="nb">time </span>go run fizzbuzz.go
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>Buzz
</span><span class='line'>
</span><span class='line'>real  0m0.132s
</span><span class='line'>user  0m0.101s
</span><span class='line'>sys   0m0.028s
</span></code></pre></td></tr></table></div></figure>


<p>It was also fast. Almost 3x faster than rust. It wound up being slightly more
code, as Go requires you to name the package, and to import the <code>fmt</code> package
just to print to <code>stdout</code>. However, the experience writing it was quite nice.
Very clear errors appeared at compile time, which was helpful as a n00b.</p>

<p><a href="https://github.com/chrishenry/fizzbuzz/blob/master/go/fizzbuzz.go">Here&#8217;s my FizzBuzz implementation</a>.</p>

<h2>Conclusion</h2>

<p>Overall, it was a good learning experience to dig into the next generation of
programming languages. Rust seems promising, should I need to actually do
system programming. But Go seems like a great candidate for building fast,
portable tools.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[never blame the button pusher]]></title>
    <link href="http://chr.ishenry.com/2015/05/31/never-blame-the-button-pusher/"/>
    <updated>2015-05-31T00:14:00-04:00</updated>
    <id>http://chr.ishenry.com/2015/05/31/never-blame-the-button-pusher</id>
    <content type="html"><![CDATA[<p>While having drinks with a colleague, the topic of improving execution within an
organization came up. There had been some problems in the past few years, but
this was an organization trying to operate in an unfamiliar way, and it was
suggested that problems could&#8217;ve been avoided by having a conscientious
operator. At one point in the conversation, the following was said;</p>

<blockquote><p>The people who push the buttons that cause problems should be fired. Heads
should roll.</p></blockquote>

<!-- more -->


<p>I was a bit taken aback. In my short career, I&#8217;ve pushed a lot of buttons
that have caused <strong>a lot</strong> of problems. What was said was certainly not a
personal condemnation, but a statement made in frustration. Frustration born out
of seeing <code>human error</code> turn up as the root cause of most incidents, and not
enough improvement.</p>

<h2>Two problems</h2>

<p>The first is that the person pushing the button is probably just following a run
book. They might be brand new. The run book may have been given to them and
they were told not to deviate. That&#8217;s the point of run books, after all, is to
allow ops teams to operate safely with proven procedures.</p>

<p>The second is that mistakes and accidents happen, no matter how much
preparation, automation and resiliency engineering goes into a service. <a href="https://twitter.com/beerops/status/571096463398187008">It is
inevitable that services will fail, and getting frustrated or angry about it is
irrational.</a></p>

<p>For both of these problems, it&#8217;s extremely damaging to allow individuals to be
blamed for an incident. It destroys morale to see a team member singled out. A
rough lesson learned by one team member doesn&#8217;t always translate to
institutional knowledge that helps prevent the next issues.</p>

<h2>The solution</h2>

<p>What we need to look for are things that can written down, codified and repeated
to ensure the same problem is prevented. If a run book procedure turns out to be
incorrect in a given set of circumstances, then it needs to be reexamined, by
the entire team. If an automation does the wrong thing, it needs to be fixed. If
a system allows actions to be taken that damage the effectiveness of the
service, you need to ask why those actions are allowed.</p>

<p>The point is, there is almost always an aspect of the system that can be changed
to ensure problems are avoided. Focusing on that will be way more productive
than focusing on individual actions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Serverspec]]></title>
    <link href="http://chr.ishenry.com/2015/04/23/advanced-serverspec/"/>
    <updated>2015-04-23T13:21:00-04:00</updated>
    <id>http://chr.ishenry.com/2015/04/23/advanced-serverspec</id>
    <content type="html"><![CDATA[<p>Testing the outcome of infrastructure provisioning is an operator&#8217;s bread and
butter. Good cookbook tests create predictable automation, and can be added to
once problems are inevitably discovered. Serverspec is a huge part of ensuring
that infrastructure being provisioned via chef is actually in the desired
state.</p>

<p>Combining ruby&#8217;s builtin libraries to parse and manipulate configuration files
with serverspec is a quick and simple win. We&#8217;re no longer bound by having to
use overly complex, brittle regexes to ensure files are created correctly.</p>

<p>Here&#8217;s a few ways to pull in rubygems when writing serverspec;</p>

<ul>
<li>Simply use ruby <code>include</code></li>
<li>Add a Gemfile to your serverspec folder</li>
<li>Use Gem::DependencyInstaller in the spec_helper.rb</li>
</ul>


<p>Here&#8217;s an example of installing the <code>inifile</code> gem in your <code>spec_helper.rb</code>.</p>

<figure class='code'><figcaption><span>Install a gem in spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="ss">Gem</span><span class="p">:</span><span class="ss">:Specification</span><span class="o">.</span><span class="n">find_by_name</span><span class="p">(</span><span class="s1">&#39;inifile&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span> <span class="ss">Gem</span><span class="p">:</span><span class="ss">:LoadError</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;rubygems/dependency_installer&#39;</span>
</span><span class='line'>  <span class="ss">Gem</span><span class="p">:</span><span class="ss">:DependencyInstaller</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">Gem</span><span class="p">:</span><span class="ss">:DependencyInstaller</span><span class="o">::</span><span class="no">DEFAULT_OPTIONS</span><span class="p">)</span><span class="o">.</span><span class="n">install</span><span class="p">(</span><span class="s1">&#39;inifile&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s a few examples of using the ini gem we installed to make our tests better.</p>

<figure class='code'><figcaption><span>Parse an ini file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;inifile&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;conf file tests&#39;</span>
</span><span class='line'>  <span class="n">program_conf</span> <span class="o">=</span> <span class="s1">&#39;/my/path/to/important/program.conf&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;writes out a program.conf file&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">file</span> <span class="n">program_conf</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_file</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Regex test</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;has the correct maxmemory value&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">file</span><span class="p">(</span><span class="n">program_conf</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">match</span><span class="o">/^</span><span class="n">program</span><span class="p">\</span><span class="o">.</span><span class="n">java</span><span class="p">\</span><span class="o">.</span><span class="n">maxmemory</span><span class="o">.</span><span class="n">*</span><span class="o">=.</span><span class="n">*</span><span class="mi">512</span><span class="o">.</span><span class="n">*</span><span class="vg">$/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Lib test</span>
</span><span class='line'>  <span class="n">program_ini</span> <span class="o">=</span> <span class="no">IniFile</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">program_conf</span><span class="p">)</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;has the correct maxmemory value&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">program_ini</span><span class="o">[</span><span class="s1">&#39;global&#39;</span><span class="o">][</span><span class="s1">&#39;program.java.maxmemory&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Parsing config files with similar libs that would be consuming them in
production provides a lightweight, implied method of testing that those files
are valid. It&#8217;s also a straightforward, programmatic approach to getting values
out of configuration files. And not just scalar values, but lists and arrays.</p>

<p>Here&#8217;s a more in-depth example, using rspec.</p>

<figure class='code'><figcaption><span>Parse a json file, check some values, and ensure all items are present in a list</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s1">&#39;json config&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">config_file</span> <span class="o">=</span> <span class="s1">&#39;/etc/default.json&#39;</span>
</span><span class='line'>  <span class="n">conf</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">config_file</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;does *not* have the unkey key&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">conf</span><span class="p">)</span><span class="o">.</span><span class="n">to_not</span> <span class="n">have_key</span><span class="p">(</span><span class="s1">&#39;unkey&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;sets foo to bar&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">conf</span><span class="o">[</span><span class="s1">&#39;foo&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">expected_items</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s1">&#39;127.0.0.128&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;127.0.0.126&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;127.0.0.127&#39;</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="n">conf</span><span class="o">[</span><span class="s1">&#39;items&#39;</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">match_array</span><span class="p">(</span><span class="n">expected_items</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding Music, Spring 2015]]></title>
    <link href="http://chr.ishenry.com/2015/04/11/coding-music-spring-2015/"/>
    <updated>2015-04-11T16:14:00-04:00</updated>
    <id>http://chr.ishenry.com/2015/04/11/coding-music-spring-2015</id>
    <content type="html"><![CDATA[<p>Normally, I&#8217;m a big fan of music without lyrics or much adornment for coding,
but for the past few months, there have been a few albums in my rotation that
are pretty heavy on the lyrics and complications. This edition has four guitar
heavy albums, and three with way more singing than usual.</p>

<h3><em>Antemasque</em>, Antemasque</h3>

<p>Antemasque is a newish project from Omar Rodriguez-Lopez, from Mars Volta and At
the Drive-In fame. While Mars Volta have long been a favorite for coding, thanks
to the free form jazz and overall chaotic energy, Antemasque is significantly
more straight ahead progressive rock. Busy guitars, with only a light coat of
fuzz, push forward and provide a sonic landscape you can lose yourself in.
Cedric Bixler-Zavala&#8217;s vocals are elegantly mixed in, riding right alongside the
guitars. Most of album has a quick, steady drive, with only a quick slowdown for
&#8220;Drown All Your Witches&#8221; and &#8220;Providence&#8221;.</p>

<h3><em>Monuments</em>, Ume</h3>

<p>I found this album through <a href="http://www.craveonline.com/music/articles/795103-20-best-albums-2014">Crave Online&#8217;s Best Albums of 2014</a>.
I&#8217;m a huge sucker for a band with a big sound and a strong female front, having
spent a lot of time listening to the Joy Formidable after seeing them at SXSW
years ago. Ume (pronounced ooh-may) is usually a bit more of what I&#8217;m looking
for, tempowise, in coding music. Most songs are a laid back andante, moved along
by thrumming bass. What I like most is Lauren Larson&#8217;s silky, gently echoing
voice over shiny, just shy of screeching guitar licks.</p>

<h3><em>Gangs</em>, And So I Watch You from Afar</h3>

<p>As creepy as this band&#8217;s name is, they are anything but. Their more recent
album, <em>All Hail Bright Futures</em>, was contagiously happy and comforting, but
that&#8217;s for another post. <em>Gangs</em>, on the other hand, is certainly
non-threatening, but has a big enough punch to kick your ass even through Apple
earbuds. Both albums were instrumental, and as such have been a big part of my
Spotify rotation. The standout track for me is &#8220;Search:Party:Animal&#8221;, with a
desperate, machine guitar riff driving away, punctuated by mountainous bass guitar hits.
Interwoven throughout are quiet, but perturbed bass interludes that eventually
culminate in the band coming together for builds that drop into high jitter. The
whole thing ends in a midrange modulation turned into a samba-esque power chord
riff with an abrupt but tasty ending. The rest of the album presents the same
mountainous walls of guitar distortion.</p>

<h3><em>Gemini, Her Majesty</em>, RX Bandits</h3>

<p>The RX Bandits were a favorite of mine a few years ago, and <em>Gemini, Her
Majesty</em> is their first record in five years. Again, big thanks to <a href="http://www.craveonline.com/music/articles/795103-20-best-albums-2014">Crave
Online</a>
for uncovering this one. What I like here is the relaxed, smooth, yet exuberant
crooning over bright SoCal guitar riffs. There&#8217;s lots of forward movement, as
most of the album has a quick pace, driving at times, but powerful riffs where
the whole band hits together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When to do it yourself]]></title>
    <link href="http://chr.ishenry.com/2015/03/31/when-to-do-it-yourself/"/>
    <updated>2015-03-31T20:07:00-04:00</updated>
    <id>http://chr.ishenry.com/2015/03/31/when-to-do-it-yourself</id>
    <content type="html"><![CDATA[<p>Your time is extremely valuable, and execution of your product is everything.
When it comes to building out key pieces of infrastructure, the choice of
whether to build it, buy it, or use open source is very personal,
and depends on what the business really needs.</p>

<p>You do things yourself when you need fine grained control of a resource, or
require a deep understanding of a mission critical function. Can anyone do it
better than you can? Even if they can, do you have enough control in the
direction to get what you need? Does the time it takes to learn and execute in a
given domain warrant the value it provides? Or could that time be spent on
something else that would move the needle?</p>

<p>Dead giveaways are things the user sees. Design and product development can’t be
outsourced, nor can the actual execution of your product. Those stay in house,
no matter what. Your ability to find your voice and interact with your customers
is the thing that makes your product unique. If you cannot execute on your own
product, it&#8217;s a strong indication you&#8217;re not doing the right thing.</p>

<p>However, depending on your needs, there gets to be a long list of things that
aren’t your product, but are still critical to running your business. Campaign
and transactional email are great examples. Executing on mass email is extremely
difficult because of defenses put in place by major ISPs. You need an IP with a
good reputation, reverse DNS, a host that will allow massive amount of email to
leave it’s datacenter, and the list goes on and on.</p>

<p>There are also implicit supporting requirements of running a service that you
need to have but shouldn&#8217;t ever try to build. Project tracking, monitoring,
graphing, and alerting are all examples of components that have executed
extremely well by others, and can simply be turned on or deployed with minimal
effort on the part of your team.</p>

<p>In the end, what’s critical is spending your energy on the things that actually
create impact. Knowing the intersection of tradeoffs and priorities is what will
keep your team on the path that gets the job done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flight Status]]></title>
    <link href="http://chr.ishenry.com/2014/11/02/flight-status/"/>
    <updated>2014-11-02T16:13:00-05:00</updated>
    <id>http://chr.ishenry.com/2014/11/02/flight-status</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I was stuck in an airport for a couple hours. I was flying to San Francisco, and upon arriving to JFK, was informed my flight would be delayed several hours due to a <a href="http://en.wikipedia.org/wiki/Ground_delay_program">ground delay program</a>. A ground delay program is put in place when a particular airport&#8217;s ability to keep up with traffic is diminished. If your destination airport has a program in place, your takeoff will be delayed until the destination recovers.</p>

<p>A ground delay program is the operations equivalent of shedding load. ATC essentially stops allowing inbound flights to take off to allow for the extra time and care it takes for en-route flights to land safely. This is very similar to <a href="http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html">Netflix&#8217;s implementation of the CircuitBreaker pattern</a>, as it allows the resource having trouble to recover while keeping flights en route at a minimum.</p>

<p>While I was stuck, I found there&#8217;s a couple really neat tools that can tell you a little about your chances of getting there on time.</p>

<h4>FAA</h4>

<p>The FAA is kind enough to supply information on delays <a href="http://www.fly.faa.gov/flyfaa/usmap.jsp">here</a>. However, I found the information to be presented here a bit disingenuous. The map continued to show my destination airport as green, although flights were actually being held at departure points.</p>

<h4>FlightStats.com</h4>

<p><a href="http://www.flightstats.com">They</a> have a delay index where every destination airport is given a ranking of 0 through 5, 0 being totally on time, and 5 meaning go back to the airport bar and grab another beer. They also very helpfully track whether that index is trending up or down. These relate directly to how long a Ground Delay Program has been running. The longer that ground delay program runs, they more likely that index is going to going to trend up. They also provide a listing of flights to your destination airport that you can use to benchmark how delayed other flights and airlines are.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Return]]></title>
    <link href="http://chr.ishenry.com/2014/09/12/a-return/"/>
    <updated>2014-09-12T19:48:00-04:00</updated>
    <id>http://chr.ishenry.com/2014/09/12/a-return</id>
    <content type="html"><![CDATA[<p>The past year has been an extremely busy one. There have been a number of challenges placed in front of me that were somewhat all-consuming. While there&#8217;s been plenty of introspection, much of it has been exceedingly private. My goal for the end of the year is to consider what I&#8217;ve learned in the past 9 or so months, and share it publicly. Wish me luck.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inn on Randolph]]></title>
    <link href="http://chr.ishenry.com/2013/12/30/inn-on-randolph/"/>
    <updated>2013-12-30T17:13:00-05:00</updated>
    <id>http://chr.ishenry.com/2013/12/30/inn-on-randolph</id>
    <content type="html"><![CDATA[<p>This Christmas, <a href="http://sequinsandbobbypins.com/">Jessica</a> and I took a trip to Napa Valley. In the past year, I&#8217;ve taken quite a few trips out to California, but most of them have been helicopter trips for work. I&#8217;ve flown in, done what I needed to do, and flown out, as quickly as possible. These trips have been grueling, as they were designed to get me home quickly, and never allowed any time for relaxation. It seemed important to take a trip focused on getting to know an area.</p>

<p>We decided that we were going to spend a few days in Napa, so naturally, a B&amp;B was a great choice. We wanted to have breakfast provided, a bunch of other folks to chat with about life, and a warm, comfy place to call home for a couple days. We found the <a href="http://www.innonrandolph.com/">Inn on Randolph</a> via the Googlez, and were impressed by the comfortable looking rooms, so we booked. They offered a wine tour through <a href="http://www.platypustours.com/">Platypus Tours</a> so we booked it. It seemed like a good idea for 2 folks who haven&#8217;t been behind the wheel in years to not be behind the wheel and drinking. That&#8217;s about all the planning we did.</p>

<p>Upon arriving, we were greeted warmly, given freshly baked cookies and the lay of the land. Both Karen and Stacey were immensely knowledgeable about navigating Napa, and were able to recommend great places based on how we felt. What&#8217;s more, it seems the Inn on Randolph has taken advantage of a great network of wine makers, restaurateurs, and tasting rooms to provide a great experience. Each morning at breakfast, Karen or Stacey would ask if we had plans, and if not, could they help. On their recommendation, they booked us into amazing experiences. For wineries they couldn&#8217;t book us into, they provided tasting cards. Much of the value of staying at the Inn is the advice and access (read: free tastings) they provide. However, expect that to evaporate into wine purchases, as the recommendations will quickly turn into opportunities to buy very unique and delicious wines.</p>

<p>The Inn itself is gorgeous. It has a warm, comfortable palette of dark wood, grays, and cremes decorated with Victorian furniture. The Inn has also paid close attention to creature comforts that make for a truly relaxing stay away from home. The bathroom floors were heated, which makes the Inn the most luxuriant place I have ever stayed at. The beds were the kind that hug you and don&#8217;t let go, with heavy comforters that make it difficult to leave. (The only way I was able to get up was knowing my feet wouldn&#8217;t freeze on cold floors.)</p>

<p>All in all, this was an incredibly warm, comfortable way to spend a few days in wine country. The Inn aims to send folks to places that will educate and treat them well, and to provide a delightful place to roost at once they&#8217;re done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eggs Benedict and Burgers]]></title>
    <link href="http://chr.ishenry.com/2013/10/06/eggs-benedict-and-burgers/"/>
    <updated>2013-10-06T12:33:00-04:00</updated>
    <id>http://chr.ishenry.com/2013/10/06/eggs-benedict-and-burgers</id>
    <content type="html"><![CDATA[<p>Since moving to New York, and discovering that there are more restaurants per square mile than any other place in the world, I&#8217;ve started eating out a lot. A probably unhealthy amount. But that&#8217;s OK, because everyone&#8217;s got to eat, right? And after eating at lots of places, I&#8217;ve discovered that there are certain gold standard dishes that most places are beholden to. The two that I&#8217;ve focused on are Eggs Benedict, and the humble hamburger. These are two meals that are basic, but can be riffed on infinitely.</p>

<p>Eggs Benedict is arguably the more complex of the two, given <a href="http://www.youtube.com/watch?v=z3eLeDNK1fo">how hard it can be to poach a goddamn egg properly</a>. Also, since it&#8217;s a breakfast, a bad eggs benny can put a serious damper on your day. However, despite the whole poaching challenge, I&#8217;ve rarely seen it mangled. There&#8217;s even room for quite a bit of variance. A bit of apple cider vinegar in the water can impart a tangy flavor. A few seconds can make the difference between a completely liquid yolk and a more viscous one.  Then we get to the bread (soda bread being a unique standout, at <a href="http://wilfieandnell.com/">Wilfie and Nell</a>. This is the foundation of the dish, so it can really make or break it. For example, an overdone, rubbery English muffin can be so challenging to even the sharpest steak knife that you wind up shredding the whole meal. Breakfast should never be a workout. Hollandaise sauce is yet another canvas which can be painted on in endless ways. It accepts most seasonings surprisingly well. Dill is my favorite so far. Then you have the pig portion of the meal. Ham steak, streaky bacon, it&#8217;s all fair game.</p>

<p>The you have the burger, the old American stalwart. Again, super hard to screw up, but even harder to stand out. You also don&#8217;t have to wait in line at Umami Burger to get a good one. The blend of meat that goes into the patty (LaFrieda is king here), the cheese, bun all have a universe of possibilities. In my opinion, the more fat you start with in your meat, the better. Any burger that has short rib within 10 feet of it&#8217;s name is almost guaranteed to have a great flavor and texture. As pricy as it was, the $25 Black Label burger at <a href="http://www.minettatavernny.com/">Minetta Tavern</a> was really something special. The patty there was made of prime dry-aged neef cuts. The choice of caramelized onions was awesome, as was skipping the cheese, as the patty stood completely on its own. Cave aged cheddar, which <a href="http://peelsnyc.com/">Peels</a> employs, has made for a notable meal. And of course, the bun is there to keep your fingers (relatively) clean, or just fall apart. It doesn&#8217;t even have to be a traditional bun. <a href="http://whitmansnyc.com/">Whitman&#8217;s</a> makes a patty melt that comes between two slices of a Blue Ribbon Pullman loaf.</p>

<p>The best thing about these two dishes is that they&#8217;ll never get old. As long as restaurants keep experiments, coming and going, there&#8217;s always going to be an awesome variation!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the wrong path]]></title>
    <link href="http://chr.ishenry.com/2013/09/03/the-wrong-path/"/>
    <updated>2013-09-03T22:26:00-04:00</updated>
    <id>http://chr.ishenry.com/2013/09/03/the-wrong-path</id>
    <content type="html"><![CDATA[<p>Robert Frost extolled the path not taken in his famous poem. It was a tribute to bucking the trend, and finding a place that was your own. In the go go go world of the tech industry, there are fewer paths untrodden, and many of them look wrong. And yet there are just as many reasons to go along those paths. Those reasons are specific to each context, and may look sunnier or darker depending on what lays along that path.</p>

<p>After seeing many of these paths, and knowing that each one looks different to everyone, the only way to truly determine the wrong path is to wholeheartedly walk down a path as if it were the right one. My favorite learning experiences have been when I pursued paths that seemed right, but were not. When determining the right path to take, sometimes the best thing to do is pick a path, walk down it, and see if you get where you need to go.</p>

<p>Here&#8217;s to walking down each path as if it were right.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What it feels like to be DDoS'ed]]></title>
    <link href="http://chr.ishenry.com/2013/07/29/what-it-feels-like-to-be-ddosed/"/>
    <updated>2013-07-29T23:02:00-04:00</updated>
    <id>http://chr.ishenry.com/2013/07/29/what-it-feels-like-to-be-ddosed</id>
    <content type="html"><![CDATA[<p>The internet is hostile. Not because of trolls or flame wars or your opinion on gay marriage, but because people want to destroy you. For absolutely no fucking reason. DDoS attacks are the scariest thing in the world to someone running a website.</p>

<p>The alerts will trickle in at first. It&#8217;ll just be a web sever or two that&#8217;s squawking. Then more. Then external monitoring will go off. Pingdom will mark you as down, a painful insult to your hard work, and numerous nines. Then all of the web servers will alert as down. And those alerts will keep coming. For a large infrastructure, potentially hundreds. You&#8217;ll have to quit email, or turn off notifications, or the cacophony of dings and vibrations will rattle around your brain and wrestle away whatever modicum of clarity you may have. SSH hangs, pings fail, your jump server gets squirrelly, and panic mounts. Tell your boss to get on chat. Don&#8217;t email, text, or call, because those channels will be fucked, occupied by automated alerts, hosting providers, vendors, and other team members.</p>

<!-- more -->


<p>Vendors might be confused because they can&#8217;t get to key pieces of infrastructure. That infrastructure and networking gear might be shared with others, which will freak everyone out more. If the attack is large enough, they may be experiencing the same feelings. You feel shitty, knowing this affected others, but you feel it later, because you can&#8217;t possibly feel more feelings. Hopefully your vendors have dealt with this before. Hopefully they know what they&#8217;re doing. Hopefully they&#8217;ll have an update in a few minutes. Hopefully that update won&#8217;t be that they null-routed your IP.</p>

<p>When the attack is several times larger than your subscribed bandwidth, service is denied. To your customers, to your team, and probably to upstream infrastructure. ISPs can&#8217;t, and sometimes wont, help. In fact, they&#8217;re likely to shun you. The dreaded null route, where there&#8217;s no hope of coming back up anytime soon. That&#8217;s the moment when there&#8217;s nothing you can do because the infrastructure leading to your environment has been overwhelmed.</p>

<p>A DDoS never happens at a convenient time. They happen late at night, during a team outing, or when you just took a sleeping pill, or have a major launch to contend with. The randomness is just another thing that makes you feel helpless, and ineffective. Impotent.</p>

<p>Once you&#8217;ve picked up the pieces, and mitigated, or waited it out, that&#8217;s when exhaustion comes. Or rage, then exhaustion. When and if you finally get to sleep the night after the attack, it&#8217;ll be fleeting. You&#8217;ll wake up often, check your phone, looking for alerts or a sign that it happened again. You&#8217;ll wake up early the next day, nowhere near rested, go back to the office and wait.</p>

<p>Incidents beg the question &#8220;who would do such a thing?&#8221;. Particularly when during your tenure, you&#8217;ve never done anything to hurt anyone, and  your service was designed to help people. Hell, even your competitors even respect you. The whole thing was birthed to help people, the little people, the people who always get taken advantage of. You love this site on some level, or you wouldn&#8217;t be part of the response. If you don&#8217;t love it, you at least feel a duty to protect it. If you don&#8217;t fall into either category, and are blissfully unaware, or asleep, you&#8217;re a either a prick or incompetent.</p>

<p>Once it&#8217;s over, you constantly fear they&#8217;ll come back. Thoughts and theories swirl about, unchecked. People will ask about the perpetrators, and you can only shrug, wearily. In the vacuum of facts, folks will supply their own theories. The conjecture about the attackers will be endless, the convo du jour.</p>

<ul>
<li>They did it for the lulz.</li>
<li>They were definitely Chinese.</li>
<li>They did because they had a botnet and nothing better to do.</li>
<li>They did it because they hate our guts.</li>
<li>It&#8217;s an Eastern European douchebag.</li>
<li>There was a guy who called into support and was pissed, I bet it was him.</li>
<li>They did it because they want to hurt someone who&#8217;s using the service.</li>
<li>They targeted you because of who you&#8217;re working with.</li>
<li>It&#8217;s some fat slob asshole who lives in his mother&#8217;s basement and he didn&#8217;t get any meatloaf.</li>
<li>It was Prism.</li>
</ul>


<p>Conjecture is useless. The attacker doesn&#8217;t have a face. And even if it does, it&#8217;s extremely unlikely you&#8217;ll ever see it. The sad fact is that there will be no Liam Neeson Taken-style vengeance. You won&#8217;t suddenly appear on another continent, infiltrate their lair, and punch their teeth down their throat. No matter how bad you may want to.</p>

<p>When you get into the office again, you&#8217;ll likely be hailed as a hero. After all, you &#8220;fought the hackers.&#8221; Deep down, even after you got everything back in place, you still feel a little bit like a failure, because it happened at all. You take the congratulations sheepishly, through bleary eyes, deathly afraid of the next attack.</p>

<p>Pragmatically, most of your energy should be focused on things like re-ip&#8217;ing your web site. Engaging with hosting providers to get mitigation services in place, talking directly to mitigation experts to see what help they can be, analyzing the attack to see if there are ports that can be closed to an attacker completely, fixing your application to handle the closing of ports that were attacked on, standing up services to get around ports being closed, altering your application to gather inputs in a more intelligent way after the hacks that were put in place assuming there would never be any serious infrastructure changes made without seriously considering them first.</p>

<p>You have a lot of work to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSS Resolution, and Blog Updates]]></title>
    <link href="http://chr.ishenry.com/2013/06/30/blog-updates/"/>
    <updated>2013-06-30T20:40:00-04:00</updated>
    <id>http://chr.ishenry.com/2013/06/30/blog-updates</id>
    <content type="html"><![CDATA[<p>After much neglect, and a few insane weeks, I&#8217;ve finally gotten the time to update a few things in my daily toolkit. First, RSS; I&#8217;ve decided to go all in with <a href="http://www.feedly.com" target="_blank">Feedly</a>. I&#8217;ve found it to be a great cross-platform candidate that&#8217;s had to deal with a <a href="http://blog.feedly.com/2013/06/21/summary-of-the-last-100-days/">lot of scaling challenges</a> in a very, very short period of time. I give them a lot of credit for building a massive platform and being able to continue to add features to what looks like a web app with great potential. At the moment, my only real gripe would be a progress indicator in the browser of the iOS app.</p>

<!-- more -->


<p>Secondly, I&#8217;ve made a few small updates to this very site. Since Twitter has deprecated v1 of their API, which the <a href="http://octopress.org">Octopress</a> supplied twitter widget depends on, has crapped out. Since I&#8217;ve been all about minimalism lately, it seemed appropriate to simply pull the plug on it. That decision led me down the rabbit hole of how to update Octopress themes. (Hint: if you are using a theme, and you edit sass and html files in source, <a href="http://i95.photobucket.com/albums/l142/gstatejester/02-youre-doing-it-wrong.jpg?t=1285658433" target="_blank">you&#8217;re doing it wrong</a>.) That revelation led me to forking the venerable <a href="https://github.com/tommy351/Octopress-Theme-Slash">Slash</a> Octopress theme. <a href="https://github.com/chrishenry/Octopress-Theme-Slash">My own fork</a> loses the Twitter feed, narrows the layout a bit, and adds an Add to Feedly link.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GReader is going away, and I'm not that sad]]></title>
    <link href="http://chr.ishenry.com/2013/06/09/greader-is-going-away/"/>
    <updated>2013-06-09T13:15:00-04:00</updated>
    <id>http://chr.ishenry.com/2013/06/09/greader-is-going-away</id>
    <content type="html"><![CDATA[<p>There was a period where I was insanely into RSS. It was what I did every time I sat down at the computer. I fired up the Google Reader tab, and spent hours in there. I pored over everything, and it was a really fun game to try and get through everything and still retain at least one useful piece of information from my frenzied filtering. That was usually the case, as at that time, I had a pretty tightly curated list of feeds.</p>

<!-- more -->


<p>Then Twitter came along. I was quite the naysayer of Twitter when it came out, dismissing it as a fad. But I got caught up, just like most people. It was a lot of fun sharing small bits of stuff, and forced me to distill a thought down into 140 characters. It gave me insight into smart people and what they were thinking about. But most importantly, I started using it as my reading list. It was easier to let others pick out the good stuff, and then scan through to find the stuff I thought was relevant to me. Quickly, favorites list became my reading list.</p>

<p>I did, however, switch everything over to <a href="http://www.feedly.com/index.html">Feedly</a> this morning. What I realized is that my list of feeds has become completely unmanageable. I actually broke their UI trying to organize everything. (Not sure if it&#8217;s their fault or mine.) The biggest problem is that I would randomly add feeds after seeing a single post, and many times there was nothing else helpful in the feed. Or worse, the feed is completely dead. In order for RSS to be useful, it seems like a feed has to be active to make it&#8217;s way to in front of my eyeballs. So I got rid of a lot of feeds that had no posts since my last visit to GReader.</p>

<p>This experience has made me doubt the future of RSS Readers as a scalable solution for consuming information. While I&#8217;ll be giving Feedly a fair shot, I wonder how if I&#8217;ll actually be opening it up every day, as opposed to going to Twitter favorites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Decisions with Graphite]]></title>
    <link href="http://chr.ishenry.com/2013/05/05/making-decisions-with-graphite/"/>
    <updated>2013-05-05T21:01:00-04:00</updated>
    <id>http://chr.ishenry.com/2013/05/05/making-decisions-with-graphite</id>
    <content type="html"><![CDATA[<p>The DevOps mentality of &#8220;measure everything&#8221; can be really helpful in key moments when you need to make decisions. In particular, deploying two things side by side for the purposes of measurement can yield super helpful decision making information. For example, the Behance team was wanted to see how <a href="http://php.net/manual/en/book.apc.php">APC</a> stacked up against <a href="http://pecl.php.net/package/ZendOpcache">Zend Opcode Cache</a>.</p>

<!-- more -->


<p>Behance has been running APC for several years, and we&#8217;ve been pretty happy with it. There&#8217;s the typical pain, usually in unexplainable segfaults, that comes with upgrades. However, with the most recent upgrade to PHP 5.4, the segfaults got a bit out of hand. After some investigation, it turned out that APC was on it&#8217;s way out, and we should probably consider other opcode caches. However, as a rightly skeptical team, we wanted to thoroughly vet any alternative thoroughly. APC has been good to us, from a performance standpoint, and we needed to make sure that anything we changed to was as good or better.</p>

<p>For a baseline, we were already measuring performance using <a href="http://chr.ishenry.com/2013/04/01/first-byte/">mod_log_firstbyte</a> and kicking its output to <a href="https://github.com/etsy/statsd/">statsd</a> with a <a href="http://graphite.wikidot.com/">Graphite</a> frontend. Once we confirmed that Zend actually worked with our app (not in production), we reconfigured one of our production web heads to use it. Luckily, our segfaults stopped, which was a fantastic sign. However, to satisfy our performance requirement, we needed some hard numbers.</p>

<p>Graphite has a really great <a href="http://graphite.readthedocs.org/en/0.9.10/render_api.html">API</a> that allows you to slice and dice your data in really helpful ways. Since we were interested in comparing two data series (the newly configured server, and any older server), we were able to use the <a href="http://graphite.readthedocs.org/en/0.9.10/functions.html#graphite.render.functions.diffSeries">diffSeries function</a> to graph the comparison between the two datasets, like so, and produced a graph like below.</p>

<blockquote><p>diffSeries(stats.timers.stat_thats_likely_to_be_higher, stats.timers.stat_thats_likely_to_be_lower)</p></blockquote>

<p><img src="http://chr.ishenry.com/images/user/diffseries.png" alt="diffSeries graph" /></p>

<p>Since there&#8217;s some math involved, this isn&#8217;t the most straightforward graph to read. There are 3 patterns that emerge from using this function;</p>

<ul>
<li>If both series are equal, then it will produce a graph that hovers around 0.</li>
<li>If the second series is consistently lower, then the graph will be consistently > 0.</li>
<li>If the first series is consistently lower, then the graph will be consistently &lt; 0.</li>
</ul>


<p>In the case of our example, we saw a graph that was consistently above 0. This meant that Zend Opcode cache was consistently faster, to the tune of 5-10ms. Knowing that we had solved the segfaults problem, and knowing that Zend was statistically faster, the choice was super simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Policy Fallacy]]></title>
    <link href="http://chr.ishenry.com/2013/04/14/policy-fallacy/"/>
    <updated>2013-04-14T19:05:00-04:00</updated>
    <id>http://chr.ishenry.com/2013/04/14/policy-fallacy</id>
    <content type="html"><![CDATA[<blockquote><p>&#8220;The Navy is a master plan designed by geniuses for execution by idiots. If you&#8217;re not an idiot, but find yourself in the Navy, you can only operate well by pretending to be one.&#8221;
-Herman Wouk, The Caine Mutiny</p></blockquote>

<p>The worst arguments I&#8217;ve ever had were with people who weren&#8217;t willing to bend
on policy in situations where the policy made no sense. Context is everything,
and most policy is made for a situation that has likely come and gone.</p>

<p>People with judgment will recognize this, especially in the context of running
startups. Hopefully, they were the same person that made the original policy,
and can see that things have changed. Smart companies have fewer policies,
implicitly trusting their teams to make the right decision.</p>

<p><a href="http://chr.ishenry.com/images/user/use_good_judgement.png"><img src="http://chr.ishenry.com/images/user/use_good_judgement.png" alt="Use Good Judgement" /></a></p>

<p>From <a href="https://www.slideshare.net/HubSpot/the-hubspot-culture-code-creating-a-company-we-love/56">Hubspot&#8217;s Presentation Culture Code: Creating A Lovable Company</a></p>

<p>The takeaway here is that you can judge organizations and people based on how beholden they are to policy. Smart ones let you make smart decisions.</p>
]]></content>
  </entry>
  
</feed>
