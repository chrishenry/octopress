<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web Dev Teams | The Technician]]></title>
  <link href="http://chr.ishenry.com/blog/categories/web-dev-teams/atom.xml" rel="self"/>
  <link href="http://chr.ishenry.com/"/>
  <updated>2015-04-12T18:07:55-04:00</updated>
  <id>http://chr.ishenry.com/</id>
  <author>
    <name><![CDATA[Chris Henry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Argument for Generalists in Web Development]]></title>
    <link href="http://chr.ishenry.com/2012/07/09/the-argument-for-generalists-in-web-development/"/>
    <updated>2012-07-09T00:00:00-04:00</updated>
    <id>http://chr.ishenry.com/2012/07/09/the-argument-for-generalists-in-web-development</id>
    <content type="html"><![CDATA[<p>"An expert is one who knows more and more about less and less until he knows
absolutely everything about nothing"
-<a href="https://twitter.com/mastersje/status/192257585745891330">@mastersje</a></p>

<p>My grandfather was a carpenter. He had an immense workbench, with a pegboard
that had hundreds of hammers, screwdrivers, wrenches, saws, drills, planes,
awls. They were powered, hand powered, circular, rotary and reciprocating.
Each of them had their own beauty, and their own use. The man could build a
picture frame, a desk, a dock, or an entire house. He may not have wielded any
of them expertly, but he knew which one to use when the situation called, and
he certainly knew how to use them in concert.</p>

<p>Two generations later, I have become a web developer, and can't help but
notice the similarities between the two. He worked in wood, but I work in bits
and bytes. Web sites, especially big ones, are not the product of a single
technology, but the result of many technologies seamlessly interacting.
Building a house is no different. Framing, roofing, laying foundation are all
separate skills that require vastly different tools. Part of the challenge of
being a web developer is being able to manage lots of technologies at once.</p>

<p>Great web developers are carpenters. Just like carpentry, there is always the
right tool for the job. Infrastructure that doesn't play well with software is
bound for failure. Software that doesn't use or fit the hardware / kernel / OS
well won't run well. As experts in web development, we can know less about
each technology, but should know more about how they work together. Tailoring
software or combinations of software packages is the magic bullet that solves
problems quickly and scalably.</p>

<p>In the context of early stage startups, generalists are a better bet for
getting a production up and running. Even as a team grows, having generalists
around means you can task a single developer with developing and entire
feature. With a bit of support from specialists, they can pull off shipping a
feature faster than a team of a couple of specialists. When widespread  issues
occur, I prefer to have a generalist in my corner, because they typically
understand the the connective tissue of a website very well, and are willing
to put in the time debugging from a variety of perspectives.</p>

<p>None of this is to say that specialists don't have their place in web
development. The web is an innovative medium that it has spawned dozens of
technologies (node.js) that require a deep pool of expertise to work in. There
are vast arrays of techniques and frameworks that cater to working in a single
technology. Generalists typically won't have the depth necessary to pull off a
awe-inspiring, truly nasty implementation. However, they'll have the right
instincts to pair it, deploy, and make it do something meaningful that a
specialist might not be able to do by themselves.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'll buy time any day.]]></title>
    <link href="http://chr.ishenry.com/2010/06/16/ill-buy-time-any-day/"/>
    <updated>2010-06-16T00:00:00-04:00</updated>
    <id>http://chr.ishenry.com/2010/06/16/ill-buy-time-any-day</id>
    <content type="html"><![CDATA[<p>Many people value money as the most important thing in life, and will gladly
trade time for it. The pursuit of saving money is an extremely American one.
People will spend time in line for free stuff, just because it's free.
Motorists getting tickets will spend days in court, just to avoid a fine.
Clipping coupons has become an art form, and even extended to the digital
world in the form of sites like <a href="http://slickdeals.net/">SlickDeals</a> and
<a href="http://www.groupon.com/">Groupon</a>.</p>

<p>Me, I like time. To me, time is way more valuable than the almighty dollar.
Reason: I can't get it back. <strong>Evar.</strong></p>

<p>If I get a parking ticket, I know that if I pony up that those 55 greenbacks,
chances are there will be a check with my name on it in the next couple of
weeks that puts that those 55 American pesos back in my pocket. If went to
court, I'd never get back that 3-4 hours of my life. I'd also probably lose
the case. I'd also probably spend that time sitting next to someone who smells
like cheese. Paying up gives me a net gain of 3-4 hours of my life, which I
could spend doing stuff I like.</p>

<p>Being on a development team in a startup is pretty much the same thing. Your
team should be focusing as much time as possible on actually developing your
product. That means doing the things unique to your business and focusing on
what your company decides it's core competency should be. However, there's
tons of work that is hard, time-consuming, and generally unpleasant. Not only
is it unpleasant, but it can be incredibly time-consuming, because chances
are, you're not good at it, or find it kind of icky. Leave that stuff to
someone else. Even better, find someone who likes doing that stuff and pay
them to do it.</p>

<p>In the cloud-infested webscape that exists today, there are any number of
companies that have decided that their core competency is something
specialized that you probably need. Companies that specialize in <a href="http://rackspace.com">IT
management</a>, <a href="http://encoding.com">video encoding</a>,
<a href="http://dynect.com">DNS</a>,
<a href="http://www.rackspacecloud.com/cloud_hosting_products/files">storage</a>,
<a href="http://recurly.com/">billing</a>, etc. all exist and are willing to accept a
chunk of your cold hard cash to provide a service. The most important thing to
realize, is that if time is of the essence (and it always is), you're not just
buying a service, you're also buying the time it would take to you to build
that service yourself. So don't be a crafty coupon-clipper and build it
yourself. Buy back that precious, precious time and spend it doing something
you really like.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Japanese Inspection]]></title>
    <link href="http://chr.ishenry.com/2010/02/12/japanese-inspection/"/>
    <updated>2010-02-12T00:00:00-05:00</updated>
    <id>http://chr.ishenry.com/2010/02/12/japanese-inspection</id>
    <content type="html"><![CDATA[<p>Everybody procrastinates. Some tasks that get pushed off don't matter, it just
gets done later. Some tasks that go over deadline result in profanities and
bloody noses. But every once in a while, tasks come along that have an
expiration date. As in, if it doesn't get done by a certain time, it doesn't
matter.</p>

<blockquote><p>You ever heard of a "Japanese Inspection?" Japanese Inspection, you see,
when the Japs take in a load of lettuce they're not sure they wanna let in the
country, why they'll just let it sit there on the dock 'til they get good and
ready to look at, But then of course, it's all gone rotten… ain't nothing left
to inspect. You see, lettuce is a perishable item…like you two monkeys.</p></blockquote>

<ul>
<li><a href="http://www.imdb.com/title/tt0099371/">Big John, <em>Days of Thunder</em></a></li>
</ul>


<p>What Big John was referring to was the fact that all he had to do was ignore
Cole and Rowdy until they didn't any fight left in them. Tasks can be just the
same way. Eventually, the need for the task to be done just goes away, or
starts to smell. The only thing that really matters is being able to tell the
difference between the things that <strong>really</strong> need to get done, and the things
that just aren't important enough to get done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix or Manage?]]></title>
    <link href="http://chr.ishenry.com/2009/10/24/fix-or-manage/"/>
    <updated>2009-10-24T00:00:00-04:00</updated>
    <id>http://chr.ishenry.com/2009/10/24/fix-or-manage</id>
    <content type="html"><![CDATA[<p>Sometimes bugs come along that require significant work to fix. Depending on
what project timelines are like at the moment, sometimes fixing the bug isn't
the best option. For example, a race condition in the caching architecture
causes pages to be stale. The persistent data store is correct, but the cache
is not. To the person who just triggered the update, there's a bug. The
information on the public side is not in sync with the information they just
entered.</p>

<p>So, like any other bug, a report will eventually percolate down to the dev
team. People scream, fortunes are lost, the svn blame command is used, and the
devs who wrote the code pee their pants. Once the chaos dies down, the actual
prognosis of this issue can turn out to be extremely grim.</p>

<p>A shortcoming of the caching architecture shows that there's a race condition
when the system is under heavy load. In order to fix it, the dev team needs to
plumb the depths of the data access layer, and probably change some
parameters. But that'll probably break everything. Everywhere. Or the layer
manipulating the data could be fixed to replace the cache instead of
invalidating. Except the methods to manipulate that entity live in 3 different
codebases. It'll probably break the editor. Either way, the actual solution
doesn't matter.The dev team certainly needs to do something, and it needs to
be released three days ago.</p>

<p>The correct way to fix this issue will vary widely depending on circumstances.
But in this particular case, the best answer was to <strong>not fix it, just manage
it</strong>. Our team was busy, there were other projects that were more pressing.
Plus the codebase was being rewritten. So instead of flogging a dead horse, a
simple script was thrown together that compared the cache and the database. If
they were out of sync, the cache would be cleared, and would be repopulated
with the correct information the next time it was requested. Once it was
implemented, the bug was still there, but the cache <em>seemed</em> to be up to date.</p>

<p>Every dev team will face bugs that have enormous costs to fix. The way to deal
with these bugs will be different every time they come up. It's important to
remember that managing bugs can be almost as effective as fixing them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's in a Name?]]></title>
    <link href="http://chr.ishenry.com/2009/10/14/whats-in-a-name/"/>
    <updated>2009-10-14T00:00:00-04:00</updated>
    <id>http://chr.ishenry.com/2009/10/14/whats-in-a-name</id>
    <content type="html"><![CDATA[<p>It's easy to get caught up in semantics. Figuring out the best names for
variables, tables, columns, classes, etc is something that can eat up hours or
even days of a development schedule. The idea is that the more precise the
name, the better it is. The arguments for precision naming are many :</p>

<ul>
<li>Clear names help other developers read your code.<em> New developers who come on will immediately understand what's happening</em> Calling well named methods of classes will read like sentence, further increasing readability.* Clear names will be able to help developers relate things in the UI to the code.</li>
</ul>


<p>Keep in mind, I'm not talking about <a href="http://en.wikipedia.org/wiki/Identifier_naming_convention">naming
conventions</a>.
Naming conventions are simply rules for choosing the character sequences. They
don't dictate what words you should assign to things in your code.</p>

<p>Whatever names developers choose, they will get strewn throughout the layers
of the application. Database, table and column names will be impacted.
Variables in server-side scripts. Organization of classes into folders.
Javascript file names. Memcache keys. URLs. Just like sand at the beach, the
labels the dev team decided on goes everywhere you can think of. Invariably,
the marketing team will bound down the hall, and announce the product is being
rebranded. Jobs will become Gigs. Friends will become Followers. Application
code will become confusing.</p>

<p>New devs won't get it anyway.</p>

<p>The fact of the matter is overthinking naming is a good way to get nowhere
fast. Keeping it simple and just take enough time to make sure that things
make sense will give devs more time to focus on important stuff. Like being
able to articulate the thought <a href="http://chr.ishenry.com/2009/07/01/explain-your-code/">process behind
code</a>.</p>
]]></content>
  </entry>
  
</feed>
