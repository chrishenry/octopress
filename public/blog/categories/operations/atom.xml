<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: operations | The Technician]]></title>
  <link href="http://chr.ishenry.com/blog/categories/operations/atom.xml" rel="self"/>
  <link href="http://chr.ishenry.com/"/>
  <updated>2015-12-18T14:43:38-05:00</updated>
  <id>http://chr.ishenry.com/</id>
  <author>
    <name><![CDATA[Chris Henry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Volunteering at Hour of Code]]></title>
    <link href="http://chr.ishenry.com/2015/12/17/volunteering-at-hour-of-code/"/>
    <updated>2015-12-17T22:48:00-05:00</updated>
    <id>http://chr.ishenry.com/2015/12/17/volunteering-at-hour-of-code</id>
    <content type="html"><![CDATA[<p>Yesterday, as part of the Hour of Code, I went to <a href="http://ithsnyc.org/2013/home">Information Technology High
School</a> in Long Island City. I spent the morning
talking to students about what it's like to work in Web Operations.</p>

<p>It was amazing seeing students taking an interest in technology and coding. Many
of them had already completed the <a href="https://hourofcode.com/us">Hour of Code</a>
projects. Others were still tinkering, seeing what they could add and change. I
spent some time critiquing and reviewing work they had done in Mrs. Ramirez's
Web Design class. The students had all created functional portfolio sites,
complete with content, small bits of javascript, and even Flash games.</p>

<p>The students were interested in my day to day, and the path I took to get
where I am in my career. The students were amazed to hear that I didn't work in
a dark closet by myself, but in a brightly lit office constantly interacting
with colleagues. They were also amazed to hear that the skills they needed to be
truly successful in tech weren't just coding and hardware, but communication,
teamwork, and judgment. How a college education fit in to a career in Web
Operations came up a few times. It was particularly interesting because I'm not
aware of any four year university that offers a program in the field.</p>

<p>Students were particularly interested to hear about about some of the
work I've done around security and incident response. Tales of defending
against <a href="http://chr.ishenry.com/2013/07/29/what-it-feels-like-to-be-ddosed/">DDoS</a>
and spam attacks were a great way to let them know that career paths in tech
aren't just limited to coding or back office IT. They were spellbound to hear
that mitigating DDoS attacks were actually something that could be part
of an actual career path, and not just something they see in TV and movies. I
truly hope that some students are inspired to pursue a career in Systems
Administration and Web Operations.</p>

<p>One thing that was made clear to me as I was asked to describe my path to Web
Operations was there is no clear path, and that sad fact has resulted in a
shortage of people in the field. I would encourage other folks in Web Operations
to spend some time talking to young students about the work that we do in the
hopes that in a few years the industry will grow and mature. After all, for
every class that learns to code, there need to be a few students who know
how to run the infrastructure for that code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Tags as a Lightweight Datastore]]></title>
    <link href="http://chr.ishenry.com/2015/11/29/aws-tags-as-a-lightweight-datastore/"/>
    <updated>2015-11-29T14:36:00-05:00</updated>
    <id>http://chr.ishenry.com/2015/11/29/aws-tags-as-a-lightweight-datastore</id>
    <content type="html"><![CDATA[<p>One of the most common tasks in administering clusters of machines is running
regular tasks on individual machines in a cluster. For example, Cassandra
benefits greatly from running repairs on individual nodes to ensure data
consistency. Operating manually, an ops team would maintain a document of when
each machine has been, and look at that to determine which machine should be
repaired next.</p>

<p>However, in a world where there could be hundreds of machines, this quickly
becomes unscalable. Even with only a handful of machines, a team could spend a
ton of energy and time simply remembering where the source of truth lives and
how to decide which machine should be repaired next.</p>

<!-- more -->


<p>A team could write some code to pick a node and run the necessary commands. This
is a bit better, but the requirement is that the command runs regularly on each
node in the cluster. Without a central record to track which nodes have been
repaired, there's no way to know when and where the last repair was run, and no
way to accurately predict which node will be picked next.</p>

<p>Enter
<a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">AWS EC2 Tags</a>.
While EC2 tagging has some restrictions, it's an ideal place to register small
bits of metadata and completely replace our old school document. For our
Cassandra example, it's easy enough to use the EC2 APIs to list all machines in
an Autoscale Group, or by tag, and then apply some logic to pick a machine.</p>

<p>Here's some sample code that will look at the instances in an ASG, and pick one
that either hasn't been repaired, or the node repaired the longest time ago.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Find least recently repaired node </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">boto.ec2</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">boto.ec2.autoscale</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ec2</span> <span class="o">=</span> <span class="n">boto</span><span class="o">.</span><span class="n">ec2</span><span class="o">.</span><span class="n">connect_to_region</span><span class="p">(</span><span class="s">&#39;us-east-1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">asg</span> <span class="o">=</span> <span class="n">boto</span><span class="o">.</span><span class="n">ec2</span><span class="o">.</span><span class="n">autoscale</span><span class="o">.</span><span class="n">connect_to_region</span><span class="p">(</span><span class="s">&#39;us-east-1&#39;</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">group</span> <span class="o">=</span> <span class="n">asg</span><span class="o">.</span><span class="n">get_all_groups</span><span class="p">(</span><span class="n">names</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;your-asg&quot;</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">instance_ids</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="o">.</span><span class="n">instance_id</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">group</span><span class="o">.</span><span class="n">instances</span><span class="p">]</span>
</span><span class='line'><span class="n">instances</span> <span class="o">=</span> <span class="n">ec2</span><span class="o">.</span><span class="n">get_only_instances</span><span class="p">(</span><span class="n">instance_ids</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Find</span> <span class="n">instances</span> <span class="n">without</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">last</span><span class="o">-</span><span class="n">repaired</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">tag</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">instance</span> <span class="ow">in</span> <span class="n">instances</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="s">&#39;last-repaired&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">instance</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Found an instance without last-repair tag&quot;</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">instance</span>
</span><span class='line'>    <span class="nb">exit</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Sort</span> <span class="n">instances</span> <span class="n">by</span> <span class="n">date</span> <span class="n">asc</span><span class="p">,</span> <span class="n">which</span> <span class="ow">is</span> <span class="n">oldest</span> <span class="n">first</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">sorted_instances</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">instances</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">instance</span><span class="p">:</span> <span class="n">instance</span><span class="o">.</span><span class="n">tags</span><span class="p">[</span><span class="s">&#39;last-repaired&#39;</span><span class="p">])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="s">&quot;Found oldest repair: &quot;</span> <span class="o">+</span> <span class="n">sorted_instances</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'><span class="k">print</span> <span class="n">sorted_instances</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">tags</span><span class="p">[</span><span class="s">&#39;last-repaired&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The above snippet is based on the venerable
<a href="http://boto.readthedocs.org/en/latest/">boto</a> library. Using python for
interfacing with AWS allows you to use a mature, well-tested library. You can
even write tests against code that uses boto with a library of mocks called
<a href="https://github.com/spulec/moto">moto</a>. In short, it looks for instances that
haven't been operated on first. This is to cover the situation where you have a
brand new cluster, or when the ASG group replaces nodes. Secondly, it sorts the
instances by the date of the last repair ascending, which gives you the oldest
node at the zeroth element of the list.</p>

<p>Taking this approach to managing infrastructure allows you create simple,
testable code with very few dependencies. Had <code>last-repair</code> data been stored in
a local database, it would require the team to create and maintain that
database, as well as write and test additional code. The team is now free to
spend that time on other things. Without needing to worry about the integrity of
a persistent datastore, it also means that this script can reliably be run on a
very ephemeral instance. In fact, it can be run from anywhere. Scheduled Jenkins
jobs would be a good way to run this, but with the advent of
<a href="http://docs.aws.amazon.com/lambda/latest/dg/getting-started-scheduled-events.html">Scheduled Lamdbda tasks</a>,
an Ops team can cut down even further on dependencies required to perform
maintenance tasks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Burnout]]></title>
    <link href="http://chr.ishenry.com/2015/11/07/burnout/"/>
    <updated>2015-11-07T18:31:00-05:00</updated>
    <id>http://chr.ishenry.com/2015/11/07/burnout</id>
    <content type="html"><![CDATA[<p>It was 4:43 PM. As I headed out the door, someone asked, "Leaving early?" No
malice, no judgment, just a bit of surprise. The office was still full,
keyboards clicking and the drone of technical conversation dully throbbing. "I'm
entitled to it, I just worked an incident for 3 days straight," I shot back.</p>

<p>Was I entitled to bail early? Probably, but that wasn't the right way to say it.
I <strong>needed</strong> to leave. Despite handling the incident deftly, I still felt
fucking awful, and in a dark, looming, nonspecific way. I needed to run from the
firehose of problems, lack of solutions, apathy and anxiety. The incident in
question was a days-long spam attack. It wasn't my first rodeo with hackers, but
this mitigation required bringing several groups together, which is always a
challenge at a large organization. To add to that, there was a pronounced lack
of resources from my own team. This attack came at a time when we were gearing
up to launch a new product, and the team was completely focused on it. Even I
had been intensely involved with ensuring the stability of a new, shaky
platform. Being pulled away just added to my frustration.</p>

<p>I had already spoken with my manager that afternoon, told him I was tired. He
kindly ordered me to go home, and take a vacation. I took the next two days off,
calling in sick. This was the second time in a month I'd unexpectedly needed
time off. At home, I crashed, played video games, watched a bunch of shitty
movies my girlfriend normally wouldn't palate, and generally just tried to avoid
the real world. Physically, I wasn't all that tired, considering I had only
slept 9 hours or so over the past 3 days. But my mind and nerves were totally
shot, and worse, I felt like I didn't care, which I hated myself for.</p>

<p>In short, I burned out. Hard.</p>

<!-- more -->


<p><blockquote><p>Burnout is a state of emotional, mental, and physical exhaustion caused by<br/>excessive and prolonged stress. It manifests itself in ways including anxiety,<br/>loss of motivation and confidence, and even degradation of physical health.<br/>Burnout can be prevalent in organizations that promote hero culture and where<br/>employees maintain a strong a sense of duty...</p></blockquote></p>

<p>--- <a href="http://burnout.io/">Burnout.io</a></p>

<p>I lead operations at a small part of a large company, and I've been there a very
long time. My mission is to ensure the company's online presence is up and
safe. Admittedly, my sense of duty to the mission has always been somewhat
overzealous. In fact, much of my identity is tied up in the job I do. Those
sentiments have truly been assets in navigating a treacherous path, but it
seemed clear that they have become a double edged sword. Once I got bored with
Xbox, I went through a journal I've been keeping for a few years.</p>

<p>In it, there were multiple notes and rants pointing to the simple fact that I
have an unhealthy work-life balance. I found a long running list of songs to
learn on guitar, but I haven't picked up my guitar in several months. I have
notes on code projects I started but didn't make any progress on for years.
There are links to museum exhibits I wanted to visit that closed long ago.
Reading through, I also realized I don't have any more than a handful of friends
outside of work. All in all, it was a pattern of regret.</p>

<p>But also a lot of reasons to make some changes. Burnout is caused by a
combination of internal and external factors, some of which can be managed. My
biggest realization, looking through my past, is that I don't need a vacation, I
need a change in how I manage my energy with regard to my sense of duty to my
work. I need to be more cognizant of how I feel when external factors rear
their head, recognize signs of nearing the burnout zone, and back away.
Presented without comment, are my signs of burnout;</p>

<ul>
<li>Saying "No" to everything, even the reasonable things</li>
<li>Shortness with team members during normal interactions</li>
<li>Feeling like I've made no forward momentum</li>
<li>Inability to express myself</li>
<li>Constant <a href="https://en.wikipedia.org/wiki/Amygdala_hijack">amygdala hijack</a></li>
<li>Inability to stay on task, or read anything longer than an email</li>
<li>Many nights in a row falling asleep while attempting to watch the same
episode of John Oliver</li>
</ul>


<p>Things I need to do to prevent getting to this place in the future;</p>

<ul>
<li>Tightly limit my hours</li>
<li>Let go of, or delegate certain things that I just don't need to do</li>
<li>Be OK with things not happening, and the failures that result</li>
<li>Commit to things I want to do; cooking, music, projects, and social events</li>
<li>Don't accept any new work unless I truly have the capacity to do it</li>
</ul>


<p>The other hard reality is that for me to affect this change, I will need to
attempt to manage the external factors. There are going to be some failures, but
I'll need to be OK with that, or I'll have to make bigger changes. I truly love
what I do, but now is the time for me to take some of myself back.</p>

<p>Wish me luck.</p>

<p>A few great burnout resources that helped me write this;</p>

<ul>
<li><a href="http://burnout.io/">burnout.io</a></li>
<li><a href="http://kentnguyen.com/personal/getting-rid-burnouts/">Getting rid of burnout</a></li>
<li><a href="https://www.usenix.org/node/186465">Burnout and Ops; Lars Lehtonen</a></li>
<li><a href="https://vimeo.com/104252736">From Hero to Zero; Jennifer Davis</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chat and Dense Communication]]></title>
    <link href="http://chr.ishenry.com/2015/08/30/slack/"/>
    <updated>2015-08-30T10:13:00-04:00</updated>
    <id>http://chr.ishenry.com/2015/08/30/slack</id>
    <content type="html"><![CDATA[<p>If you haven't noticed, communication among teams (distributed or local) is a
thing that people care a lot about. For my team, we specifically care about
density of quality communication across mediums. We're an ops team, and
being able to broadcast status and information is critically important. As we
work, we don't want to have to re-communicate across mediums, but we still want
to make sure the right people hear us and provide feedback.</p>

<p>As our team was searching for ways to accomplish this, we started using the
ubiquitous and humble webhook to push information between systems. At first,
we simply started pushing Pull Request comments into our Slack channel. This
immediately increased our velocity, as we found ourselves seamlessly moving
discussions from traditionally asynchronous mediums (Github Pull Requests) to
more real time mediums (Slack, In Person).</p>

<!-- more -->


<p>Eventually, we started adding more sources to chat via Slack integrations. Our
project tracking tool was a clear next step, as most of the information we
were pouring into it was helpful to others. Team members reacting to status
updates with pointers and questions was yet another boost to velocity of
information. Including brief comments of intent and even full blown
plans gave us a hook for correcting mistakes before they even happened.</p>

<p><blockquote><p><b>Dense Communication</b> - Extremely high signal to noise ratio textual<br/>information that's automatically compiled from different sources and intended to<br/>cross mediums.</p></blockquote></p>

<p>The flip side of this was that looking through our chat was like drinking from a
firehose. There was an immense amount of fragmented, context-less information
flowing at any given time, so much so that it was easy to drown. The uninitiated
considered our channel noisy, which is a fair assessment. Those who didn't have
access to the cornucopia of links ubiquitous to our channel had an even harder
time trying to make sense of things. Some even believed the noise was
distracting.</p>

<p>However, for those of us deep in the shit, we found that we were on the same
page more frequently. In person communication became high trust, where one
speaker could say the wrong thing and the listener could hear the right thing,
thanks largely to shared context. We found ourselves responding to status
updates made via integrations with helpful suggestions, requests to clarify,
corrections, etc. Proposed plans were reviewed earlier, and noted blocks
were busted more quickly. In general, we reacted more, contributed more, and as
a result, had better outcomes.</p>

<p>To critics of these practices, we say that <a href="https://twitter.com/postwait/status/637935373327446016">team productivity is more important
than individual productivity</a>.
As humans walk down the streets of New York, there are a million stimuli, some
gross, and some deadly. To say that people can't read and filter a few lines of
text is a cop out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Note on Amazon Autoscale Groups]]></title>
    <link href="http://chr.ishenry.com/2015/08/26/a-note-on-amazon-autoscale-groups/"/>
    <updated>2015-08-26T22:04:00-04:00</updated>
    <id>http://chr.ishenry.com/2015/08/26/a-note-on-amazon-autoscale-groups</id>
    <content type="html"><![CDATA[<p>AWS provides auto scaling to allow applications to scale up and
down to meet demand. <a href="https://aws.amazon.com/autoscaling/">Autoscaling</a> is an
excellent tactic for ensuring that an application can add and remove capacity
based on demand. Autoscale policies can be infinitely tuned to use anything that
can be recorded by CloudWatch. However, autoscale groups are also incredibly
useful for ensuring that a set number of instances is always available. This can
be accomplished by omitting scaling policies.</p>

<!-- more -->


<p>But for some reason, AWS users seem to shy away from using autoscale groups for
anything but satisfying elastic demand. However, in my experience, autoscale
groups are a critical component of <em>any</em> highly available deployment. Even
deployments of a single instance.</p>

<p>The utility of a service that does nothing but ensure that the desired number of
instances available is the basis for creating self healing infrastructure.
However, the name <code>Auto Scaling</code> has created a widely held opinion that the
number of instances must regularly change to make use of the service.
This is simply not true.</p>

<p>For example, you may find a situation where you need to ensure high availability
for an application only built to run on a single server. Or you may have a
snowflake server, or an application where it's not worth having more than one
instance. Instead of creating a standalone instance, you can create an autoscale
group with min, max and desired set to 1. As long as proper automation is in
place, and the application is a proper <a href="http://12factor.net/">12 factor app</a>,
the autoscale group will ensure there's always a single instance available.</p>

<p>As a design principle, any infrastructure created should have the means to heal
itself. Don't be put off by the name <code>Auto Scaling</code>, as the utility and value of
keeping a single instance running (that doesn't need to scale) using a well
understood and easily accessible service is worth it's weight in gold.</p>
]]></content>
  </entry>
  
</feed>
