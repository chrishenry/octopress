<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ubuntu | The Technician]]></title>
  <link href="http://chr.ishenry.com/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://chr.ishenry.com/"/>
  <updated>2014-09-12T19:32:06-04:00</updated>
  <id>http://chr.ishenry.com/</id>
  <author>
    <name><![CDATA[Chris Henry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AppArmor, Ubuntu and MySQL]]></title>
    <link href="http://chr.ishenry.com/2013/03/08/apparmor-and-mysql/"/>
    <updated>2013-03-08T22:46:00-05:00</updated>
    <id>http://chr.ishenry.com/2013/03/08/apparmor-and-mysql</id>
    <content type="html"><![CDATA[<p>The other night I was investigating a rather heinous utf8 issue. I was working on a local copy of Ubuntu 12.04 that contained the entire dev environment, except for data. So I exported a copy of the relevant data as a CSV, pulled it down, and attempted to run a <code>LOAD DATA INFILE</code>. Sane enough right? This is something I've done a million times in a bunch of different environments. However, in the vast, vast majority of cases, the error is typically pretty clear. In this case, not so much.</p>

<!-- more -->


<p>The error here was;</p>

<blockquote><p>ERROR 29 (HY000): File '/home/technician/data.csv' not found (Errcode: 13)</p></blockquote>

<p>I've been known to have short term memory glitches, so I exited mysql and double checked my path. Three times. After jumping in and out of the mysql shell, I figured there must have been some sort of issue with the placement or permissions of file. Perhaps mysql simply isn't allowed to read the file from there. So I moved it over to the /tmp folder. Ubuntu allows everyone to read from there. No dice. So I moved it back to someplace that made sense and chown'ed it to mysql:mysql still no dice. It was simply as if mysql couldn't see the file.</p>

<p>After quite a bit of googling, it turns out a program called AppArmor was blocking mysql's access to the filesystem. From the <a href="https://help.ubuntu.com/12.04/serverguide/apparmor.html">AppArmor Wiki</a>;</p>

<blockquote><p>AppArmor is a Linux Security Module implementation of name-based mandatory access controls. AppArmor confines individual programs to a set of listed files and posix 1003.1e draft capabilities.</p></blockquote>

<p>As it turns out, I'm not the <a href="https://bugs.launchpad.net/ubuntu/+source/mysql-dfsg-5.0/+bug/244406">only</a> <a href="http://ubuntuforums.org/archive/index.php/t-822084.html">one</a> <a href="http://stackoverflow.com/questions/2783313/how-can-i-get-around-mysql-errcode-13-with-select-into-outfile">who</a> had issues with this piece of software. Like any good piece of software fighting the good security fight, it gives <a href="http://en.wikipedia.org/wiki/No_quarter">no quarter</a>, intentionally obfuscating the exact error. For Ubuntu, this is pretty strange behavior. Typically, things in Ubuntu just work, and there aren't too many gotchas.</p>

<p>After a bit more Googling, the solution was relatively simple. AppArmor operates by reading in profiles for each piece of software that it monitors. Those profiles have two modes of execution, <a href="https://help.ubuntu.com/8.04/serverguide/apparmor.html">per the docs</a>.</p>

<blockquote><ul>
<li>Complaining/Learning: profile violations are permitted and logged. Useful for testing and developing new profiles.</li>
<li>Enforced/Confined: enforces profile policy as well as logging the violation.</li>
</ul>
</blockquote>

<p>So the only thing we actually have to do to get mysql back in a place where it's working as expected is to run the following.</p>

<blockquote><p>$ sudo aa-complain /usr/bin/mysql</p></blockquote>

<p>It's great that Ubuntu has enabled this by default, and taken a great step in being secure. However, it feels too heavy handed.</p>

<p>Hope this helps someone!</p>
]]></content>
  </entry>
  
</feed>
